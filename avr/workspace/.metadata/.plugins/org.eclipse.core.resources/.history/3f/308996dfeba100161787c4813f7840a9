/*
 * ST7735.cpp
 *
 *  Created on: Nov 3, 2016
 *      Author: ami
 */

#include "ST7735.h"
#include <avr/io.h>
//can it be configurable?

#define DDR  DDRB
#define PORT PORTB

#define CS_LOW   PORT &= ~(1 << _cs)
#define CS_HIGH  PORT |= (1 << _cs)

#define DC_LOW   PORT &= ~(1 << _dc)
#define DC_HIGH  PORT |= (1 << _dc)

#define RST_LOW  PORT &= ~(1 << _rst)
#define RST_HIGH PORT |=  (1 << _rst)



ST7735::ST7735(uint8_t cs, uint8_t rst, uint8_t dc, bool landscape): _cs(cs),
													_rst(rst), _dc(dc),
													_isLandscape(landscape)
{
}

ST7735::~ST7735()
{
	// TODO Auto-generated destructor stub
}

void ST7735::_spiInit()
{
	SPCR = (1 << SPE) | (1 << MSTR);
	//TODO: Add code to double the speed?

	// This is hardcoded for mega16
	DDRB |= (1 << PB7) | (1 << PB5);
}

void ST7735::_spiEnd()
{
	SPCR = 0;
}

uint8_t ST7735::_spiSend(uint8_t data)
{
	SPDR = data; //shift in some data
	while (!(SPSR & (1 << SPIF))); // wait for SPI process to finish

	return SPDR;
}


void ST7735::_writeCmd(uint8_t cmd)
{
	DC_LOW;
	CS_LOW;
	_spiSend(command);
	DC_HIGH;
}

void ST7735::_writeData(uint8_t data)
{
	_spiSend(data); //is it inline?
}

void ST7735::_writeWord(uint16_t word)
{
	_spiSend(word >> 8); // MSB
	_spiSend(word & 0xFF); // LSB
}

void ST7735::_setAddrWindow(uint8_t x0, uint8_t y0,
			                uint8_t x1, uint8_t y1)
{
	_writeCmd(ST7735_CASET);
	_writeWord(x0);
	_writeWord(x1);

	_writeCmd(ST7735_RASET);
	_writeWord(y0);
	_writeWord(y1);
}

void ST7735::_initDisplay()
{

WriteCmd(ST7735_SWRESET); // software reset
   _delay_ms(150);
   CS_HIGH;

   WriteCmd(ST7735_SLPOUT);  // out of sleep mode
   CS_HIGH;
   _delay_ms(120);

   WriteCmd(ST7735_COLMOD);  // set color mode
   WriteData(0x05);          // 16-bit color

   WriteCmd(ST7735_FRMCTR1); // frame rate control
   WriteData(0x00);          // fastest refresh
   WriteData(0x06);          // 6 lines front porch
   WriteData(0x03);          // 3 lines backporch

   WriteCmd(ST7735_MADCTL);  // memory access control (directions)
   //WriteData(0xC8);          // row address/col address, bottom to top refresh
   //    MY, MX, MV, ML,      RGB, MH, -, -
   //C8 = 1,  1,  0,  0,        1,  0, 0, 0
   //WriteData( _BV(3));
   //    1   0    1   0         1   0  0  0


#ifdef LANDSCAPE
   WriteData( _BV(7)| _BV(5) | _BV(3));
#else
   WriteData( _BV(3));
#endif


   WriteCmd(ST7735_DISSET5); // display settings #5
   WriteData(0x15);          // 1 clock cycle nonoverlap, 2 cycle gate rise, 3 cycle oscil. equalize
   WriteData(0x02);          // fix on VTL

   /*
      WriteCmd(ST7735_INVCTR);  // display inversion control
      WriteData(0x0);           // line inversion
      ST7735_CS_HI;
    */


   WriteCmd(ST7735_PWCTR1);  // power control
   WriteData(0x02);          // GVDD = 4.7V
   WriteData(0x70);          // 1.0uA

   WriteCmd(ST7735_PWCTR2);  // power control
   WriteData(0x05);          // VGH = 14.7V, VGL = -7.35V
   WriteCmd(ST7735_PWCTR3);  // power control
   WriteData(0x01);          // Opamp current small
   WriteData(0x02);          // Boost frequency

   WriteCmd(ST7735_VMCTR1);  // power control
   WriteData(0x3C);          // VCOMH = 4V
   WriteData(0x38);          // VCOML = -1.1V

   WriteCmd(ST7735_PWCTR6);  // power control
   WriteData(0x11);
   WriteData(0x15);

   WriteCmd(ST7735_GMCTRP1);
   WriteData(0x09);
   WriteData(0x16);
   WriteData(0x09);
   WriteData(0x20);
   WriteData(0x21);
   WriteData(0x1B);
   WriteData(0x13);
   WriteData(0x19);
   WriteData(0x17);
   WriteData(0x15);
   WriteData(0x1E);
   WriteData(0x2B);
   WriteData(0x04);
   WriteData(0x05);
   WriteData(0x02);
   WriteData(0x0E);
   WriteCmd(ST7735_GMCTRN1);
   WriteData(0x0B);
   WriteData(0x14);
   WriteData(0x08);
   WriteData(0x1E);
   WriteData(0x22);
   WriteData(0x1D);
   WriteData(0x18);
   WriteData(0x1E);
   WriteData(0x1B);
   WriteData(0x1A);
   WriteData(0x24);
   WriteData(0x2B);
   WriteData(0x06);
   WriteData(0x06);
   WriteData(0x02);
   WriteData(0x0F);
   /*
      WriteCmd(ST7735_CASET);   // column addr set
      WriteData(0x00);
      WriteData(0x00);          // XSTART = 2
      WriteData(0x00);
      WriteData(0x81);          // XEND = 129

      WriteCmd(ST7735_RASET);   // row addr set
      WriteData(0x00);
      WriteData(0x00);          // XSTART = 1
      WriteData(0x00);
      WriteData(0x81);          // XEND = 160
    */
   WriteCmd(ST7735_NORON);   // normal display on
   CS_HIGH;
   _delay_ms(120);

   WriteCmd(ST7735_DISPON);
   CS_HIGH;
   _delay_ms(120);
}















