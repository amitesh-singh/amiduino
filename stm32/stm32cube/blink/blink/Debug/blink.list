
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002124  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002230  08002230  00003230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022a8  080022a8  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080022a8  080022a8  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022a8  080022a8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022a8  080022a8  000032a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022ac  080022ac  000032ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080022b0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08002318  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002318  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b5d  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000122e  00000000  00000000  00007bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00008e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000357  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001735d  00000000  00000000  00009627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000052e7  00000000  00000000  00020984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081775  00000000  00000000  00025c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a73e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001830  00000000  00000000  000a7424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000a8c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002218 	.word	0x08002218

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002218 	.word	0x08002218

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
 {
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	  for (int i = 0; i < len; ++i) {
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
 80001a8:	e009      	b.n	80001be <_write+0x26>
		  ITM_SendChar(*ptr++);
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	60ba      	str	r2, [r7, #8]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	f7ff ffca 	bl	800014c <ITM_SendChar>
	  for (int i = 0; i < len; ++i) {
 80001b8:	697b      	ldr	r3, [r7, #20]
 80001ba:	3301      	adds	r3, #1
 80001bc:	617b      	str	r3, [r7, #20]
 80001be:	697a      	ldr	r2, [r7, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	dbf1      	blt.n	80001aa <_write+0x12>
	  }

	  return len;
 80001c6:	687b      	ldr	r3, [r7, #4]
 }
 80001c8:	4618      	mov	r0, r3
 80001ca:	3718      	adds	r7, #24
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bd80      	pop	{r7, pc}

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 f9d4 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f82c 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f870 	bl	80002c0 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 80001e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001e4:	480e      	ldr	r0, [pc, #56]	@ (8000220 <main+0x50>)
 80001e6:	f000 fcd1 	bl	8000b8c <HAL_GPIO_TogglePin>
	  printf("Hello World = %d\n", count);
 80001ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <main+0x54>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	4619      	mov	r1, r3
 80001f0:	480d      	ldr	r0, [pc, #52]	@ (8000228 <main+0x58>)
 80001f2:	f001 fa41 	bl	8001678 <iprintf>

	  count++;
 80001f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000224 <main+0x54>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	3301      	adds	r3, #1
 80001fc:	b2da      	uxtb	r2, r3
 80001fe:	4b09      	ldr	r3, [pc, #36]	@ (8000224 <main+0x54>)
 8000200:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000202:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000206:	f000 fa1d 	bl	8000644 <HAL_Delay>
	  printf("I love you!");
 800020a:	4808      	ldr	r0, [pc, #32]	@ (800022c <main+0x5c>)
 800020c:	f001 fa34 	bl	8001678 <iprintf>
	  fflush(stdout);
 8000210:	4b07      	ldr	r3, [pc, #28]	@ (8000230 <main+0x60>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	689b      	ldr	r3, [r3, #8]
 8000216:	4618      	mov	r0, r3
 8000218:	f001 f958 	bl	80014cc <fflush>
	  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 800021c:	bf00      	nop
 800021e:	e7df      	b.n	80001e0 <main+0x10>
 8000220:	40011000 	.word	0x40011000
 8000224:	20000084 	.word	0x20000084
 8000228:	08002230 	.word	0x08002230
 800022c:	08002244 	.word	0x08002244
 8000230:	20000018 	.word	0x20000018

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	@ 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	@ 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fa6d 	bl	8001722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000270:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000272:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fc9f 	bl	8000bc0 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000288:	f000 f866 	bl	8000358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 ff0c 	bl	80010c4 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b2:	f000 f851 	bl	8000358 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	@ 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
 80002d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000350 <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	@ (8000350 <MX_GPIO_Init+0x90>)
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0310 	and.w	r3, r3, #16
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a17      	ldr	r2, [pc, #92]	@ (8000350 <MX_GPIO_Init+0x90>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0320 	and.w	r3, r3, #32
 8000300:	60bb      	str	r3, [r7, #8]
 8000302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_GPIO_Init+0x90>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a11      	ldr	r2, [pc, #68]	@ (8000350 <MX_GPIO_Init+0x90>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_GPIO_Init+0x90>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000322:	480c      	ldr	r0, [pc, #48]	@ (8000354 <MX_GPIO_Init+0x94>)
 8000324:	f000 fc1a 	bl	8000b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8000328:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800032c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <MX_GPIO_Init+0x94>)
 8000342:	f000 fa87 	bl	8000854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000346:	bf00      	nop
 8000348:	3720      	adds	r7, #32
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	40011000 	.word	0x40011000

08000358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035c:	b672      	cpsid	i
}
 800035e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <Error_Handler+0x8>

08000364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036a:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a14      	ldr	r2, [pc, #80]	@ (80003c0 <HAL_MspInit+0x5c>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	4a0e      	ldr	r2, [pc, #56]	@ (80003c0 <HAL_MspInit+0x5c>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800038c:	61d3      	str	r3, [r2, #28]
 800038e:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800039a:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <HAL_MspInit+0x60>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	4a04      	ldr	r2, [pc, #16]	@ (80003c4 <HAL_MspInit+0x60>)
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b6:	bf00      	nop
 80003b8:	3714      	adds	r7, #20
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010000 	.word	0x40010000

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <NMI_Handler+0x4>

080003d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <MemManage_Handler+0x4>

080003e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <BusFault_Handler+0x4>

080003e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <UsageFault_Handler+0x4>

080003f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000418:	f000 f8f8 	bl	800060c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800042c:	2300      	movs	r3, #0
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	e00a      	b.n	8000448 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000432:	f3af 8000 	nop.w
 8000436:	4601      	mov	r1, r0
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	1c5a      	adds	r2, r3, #1
 800043c:	60ba      	str	r2, [r7, #8]
 800043e:	b2ca      	uxtb	r2, r1
 8000440:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	3301      	adds	r3, #1
 8000446:	617b      	str	r3, [r7, #20]
 8000448:	697a      	ldr	r2, [r7, #20]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	429a      	cmp	r2, r3
 800044e:	dbf0      	blt.n	8000432 <_read+0x12>
	}

return len;
 8000450:	687b      	ldr	r3, [r7, #4]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3718      	adds	r7, #24
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <_close>:
	}
	return len;
}

int _close(int file)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
	return -1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000480:	605a      	str	r2, [r3, #4]
	return 0;
 8000482:	2300      	movs	r3, #0
}
 8000484:	4618      	mov	r0, r3
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <_isatty>:

int _isatty(int file)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
	return 1;
 8000496:	2301      	movs	r3, #1
}
 8000498:	4618      	mov	r0, r3
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004a2:	b480      	push	{r7}
 80004a4:	b085      	sub	sp, #20
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
	return 0;
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	@ (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f001 f968 	bl	80017c0 <__errno>
 80004f0:	4603      	mov	r3, r0
 80004f2:	220c      	movs	r2, #12
 80004f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20005000 	.word	0x20005000
 800051c:	00000400 	.word	0x00000400
 8000520:	20000088 	.word	0x20000088
 8000524:	200001e0 	.word	0x200001e0

08000528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000536:	490d      	ldr	r1, [pc, #52]	@ (800056c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800054c:	4c0a      	ldr	r4, [pc, #40]	@ (8000578 <LoopFillZerobss+0x22>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800055a:	f7ff ffe5 	bl	8000528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800055e:	f001 f935 	bl	80017cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff fe35 	bl	80001d0 <main>
  bx lr
 8000566:	4770      	bx	lr
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000570:	080022b0 	.word	0x080022b0
  ldr r2, =_sbss
 8000574:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000578:	200001dc 	.word	0x200001dc

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_Init+0x28>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <HAL_Init+0x28>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f92b 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000596:	200f      	movs	r0, #15
 8000598:	f000 f808 	bl	80005ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800059c:	f7ff fee2 	bl	8000364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <HAL_InitTick+0x54>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_InitTick+0x58>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f935 	bl	800083a <HAL_SYSTICK_Config>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e00e      	b.n	80005f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d80a      	bhi.n	80005f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e0:	2200      	movs	r2, #0
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005e8:	f000 f90b 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ec:	4a06      	ldr	r2, [pc, #24]	@ (8000608 <HAL_InitTick+0x5c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000
 8000604:	20000008 	.word	0x20000008
 8000608:	20000004 	.word	0x20000004

0800060c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <HAL_IncTick+0x1c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_IncTick+0x20>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4413      	add	r3, r2
 800061c:	4a03      	ldr	r2, [pc, #12]	@ (800062c <HAL_IncTick+0x20>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000008 	.word	0x20000008
 800062c:	2000008c 	.word	0x2000008c

08000630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b02      	ldr	r3, [pc, #8]	@ (8000640 <HAL_GetTick+0x10>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	2000008c 	.word	0x2000008c

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff fff0 	bl	8000630 <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <HAL_Delay+0x44>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800066a:	bf00      	nop
 800066c:	f7ff ffe0 	bl	8000630 <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
  {
  }
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000008 	.word	0x20000008

0800068c <__NVIC_SetPriorityGrouping>:
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	4b0c      	ldr	r3, [pc, #48]	@ (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006be:	4a04      	ldr	r2, [pc, #16]	@ (80006d0 <__NVIC_SetPriorityGrouping+0x44>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	60d3      	str	r3, [r2, #12]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <__NVIC_GetPriorityGrouping>:
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b04      	ldr	r3, [pc, #16]	@ (80006ec <__NVIC_GetPriorityGrouping+0x18>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	0a1b      	lsrs	r3, r3, #8
 80006de:	f003 0307 	and.w	r3, r3, #7
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_SetPriority>:
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000700:	2b00      	cmp	r3, #0
 8000702:	db0a      	blt.n	800071a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	b2da      	uxtb	r2, r3
 8000708:	490c      	ldr	r1, [pc, #48]	@ (800073c <__NVIC_SetPriority+0x4c>)
 800070a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070e:	0112      	lsls	r2, r2, #4
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	440b      	add	r3, r1
 8000714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000718:	e00a      	b.n	8000730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4908      	ldr	r1, [pc, #32]	@ (8000740 <__NVIC_SetPriority+0x50>)
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f003 030f 	and.w	r3, r3, #15
 8000726:	3b04      	subs	r3, #4
 8000728:	0112      	lsls	r2, r2, #4
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	440b      	add	r3, r1
 800072e:	761a      	strb	r2, [r3, #24]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e100 	.word	0xe000e100
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <NVIC_EncodePriority>:
{
 8000744:	b480      	push	{r7}
 8000746:	b089      	sub	sp, #36	@ 0x24
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	f1c3 0307 	rsb	r3, r3, #7
 800075e:	2b04      	cmp	r3, #4
 8000760:	bf28      	it	cs
 8000762:	2304      	movcs	r3, #4
 8000764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3304      	adds	r3, #4
 800076a:	2b06      	cmp	r3, #6
 800076c:	d902      	bls.n	8000774 <NVIC_EncodePriority+0x30>
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	3b03      	subs	r3, #3
 8000772:	e000      	b.n	8000776 <NVIC_EncodePriority+0x32>
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43da      	mvns	r2, r3
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	401a      	ands	r2, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800078c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43d9      	mvns	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	4313      	orrs	r3, r2
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3724      	adds	r7, #36	@ 0x24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Config>:
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007cc:	f7ff ff90 	bl	80006f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	@ (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff49 	bl	800068c <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff5e 	bl	80006d4 <__NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff90 	bl	8000744 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5f 	bl	80006f0 <__NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffb0 	bl	80007a8 <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b08b      	sub	sp, #44	@ 0x2c
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000866:	e169      	b.n	8000b3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000868:	2201      	movs	r2, #1
 800086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	69fa      	ldr	r2, [r7, #28]
 8000878:	4013      	ands	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800087c:	69ba      	ldr	r2, [r7, #24]
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	429a      	cmp	r2, r3
 8000882:	f040 8158 	bne.w	8000b36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	4a9a      	ldr	r2, [pc, #616]	@ (8000af4 <HAL_GPIO_Init+0x2a0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d05e      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 8000890:	4a98      	ldr	r2, [pc, #608]	@ (8000af4 <HAL_GPIO_Init+0x2a0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d875      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 8000896:	4a98      	ldr	r2, [pc, #608]	@ (8000af8 <HAL_GPIO_Init+0x2a4>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d058      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 800089c:	4a96      	ldr	r2, [pc, #600]	@ (8000af8 <HAL_GPIO_Init+0x2a4>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d86f      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008a2:	4a96      	ldr	r2, [pc, #600]	@ (8000afc <HAL_GPIO_Init+0x2a8>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d052      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008a8:	4a94      	ldr	r2, [pc, #592]	@ (8000afc <HAL_GPIO_Init+0x2a8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d869      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ae:	4a94      	ldr	r2, [pc, #592]	@ (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d04c      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008b4:	4a92      	ldr	r2, [pc, #584]	@ (8000b00 <HAL_GPIO_Init+0x2ac>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d863      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ba:	4a92      	ldr	r2, [pc, #584]	@ (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d046      	beq.n	800094e <HAL_GPIO_Init+0xfa>
 80008c0:	4a90      	ldr	r2, [pc, #576]	@ (8000b04 <HAL_GPIO_Init+0x2b0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d85d      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008c6:	2b12      	cmp	r3, #18
 80008c8:	d82a      	bhi.n	8000920 <HAL_GPIO_Init+0xcc>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d859      	bhi.n	8000982 <HAL_GPIO_Init+0x12e>
 80008ce:	a201      	add	r2, pc, #4	@ (adr r2, 80008d4 <HAL_GPIO_Init+0x80>)
 80008d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d4:	0800094f 	.word	0x0800094f
 80008d8:	08000929 	.word	0x08000929
 80008dc:	0800093b 	.word	0x0800093b
 80008e0:	0800097d 	.word	0x0800097d
 80008e4:	08000983 	.word	0x08000983
 80008e8:	08000983 	.word	0x08000983
 80008ec:	08000983 	.word	0x08000983
 80008f0:	08000983 	.word	0x08000983
 80008f4:	08000983 	.word	0x08000983
 80008f8:	08000983 	.word	0x08000983
 80008fc:	08000983 	.word	0x08000983
 8000900:	08000983 	.word	0x08000983
 8000904:	08000983 	.word	0x08000983
 8000908:	08000983 	.word	0x08000983
 800090c:	08000983 	.word	0x08000983
 8000910:	08000983 	.word	0x08000983
 8000914:	08000983 	.word	0x08000983
 8000918:	08000931 	.word	0x08000931
 800091c:	08000945 	.word	0x08000945
 8000920:	4a79      	ldr	r2, [pc, #484]	@ (8000b08 <HAL_GPIO_Init+0x2b4>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000926:	e02c      	b.n	8000982 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	623b      	str	r3, [r7, #32]
          break;
 800092e:	e029      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	3304      	adds	r3, #4
 8000936:	623b      	str	r3, [r7, #32]
          break;
 8000938:	e024      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	3308      	adds	r3, #8
 8000940:	623b      	str	r3, [r7, #32]
          break;
 8000942:	e01f      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	330c      	adds	r3, #12
 800094a:	623b      	str	r3, [r7, #32]
          break;
 800094c:	e01a      	b.n	8000984 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d102      	bne.n	800095c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000956:	2304      	movs	r3, #4
 8000958:	623b      	str	r3, [r7, #32]
          break;
 800095a:	e013      	b.n	8000984 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d105      	bne.n	8000970 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	611a      	str	r2, [r3, #16]
          break;
 800096e:	e009      	b.n	8000984 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	615a      	str	r2, [r3, #20]
          break;
 800097a:	e003      	b.n	8000984 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e000      	b.n	8000984 <HAL_GPIO_Init+0x130>
          break;
 8000982:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2bff      	cmp	r3, #255	@ 0xff
 8000988:	d801      	bhi.n	800098e <HAL_GPIO_Init+0x13a>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	e001      	b.n	8000992 <HAL_GPIO_Init+0x13e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	3304      	adds	r3, #4
 8000992:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	2bff      	cmp	r3, #255	@ 0xff
 8000998:	d802      	bhi.n	80009a0 <HAL_GPIO_Init+0x14c>
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	e002      	b.n	80009a6 <HAL_GPIO_Init+0x152>
 80009a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a2:	3b08      	subs	r3, #8
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	210f      	movs	r1, #15
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	6a39      	ldr	r1, [r7, #32]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	431a      	orrs	r2, r3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 80b1 	beq.w	8000b36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d4:	4b4d      	ldr	r3, [pc, #308]	@ (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a4c      	ldr	r2, [pc, #304]	@ (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b4a      	ldr	r3, [pc, #296]	@ (8000b0c <HAL_GPIO_Init+0x2b8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009ec:	4a48      	ldr	r2, [pc, #288]	@ (8000b10 <HAL_GPIO_Init+0x2bc>)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f0:	089b      	lsrs	r3, r3, #2
 80009f2:	3302      	adds	r3, #2
 80009f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fc:	f003 0303 	and.w	r3, r3, #3
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a40      	ldr	r2, [pc, #256]	@ (8000b14 <HAL_GPIO_Init+0x2c0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d013      	beq.n	8000a40 <HAL_GPIO_Init+0x1ec>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000b18 <HAL_GPIO_Init+0x2c4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d00d      	beq.n	8000a3c <HAL_GPIO_Init+0x1e8>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3e      	ldr	r2, [pc, #248]	@ (8000b1c <HAL_GPIO_Init+0x2c8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d007      	beq.n	8000a38 <HAL_GPIO_Init+0x1e4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b20 <HAL_GPIO_Init+0x2cc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <HAL_GPIO_Init+0x1e0>
 8000a30:	2303      	movs	r3, #3
 8000a32:	e006      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a34:	2304      	movs	r3, #4
 8000a36:	e004      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <HAL_GPIO_Init+0x1ee>
 8000a40:	2300      	movs	r3, #0
 8000a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a44:	f002 0203 	and.w	r2, r2, #3
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4093      	lsls	r3, r2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a52:	492f      	ldr	r1, [pc, #188]	@ (8000b10 <HAL_GPIO_Init+0x2bc>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	089b      	lsrs	r3, r3, #2
 8000a58:	3302      	adds	r3, #2
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	492c      	ldr	r1, [pc, #176]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	608b      	str	r3, [r1, #8]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4928      	ldr	r1, [pc, #160]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a94:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	4922      	ldr	r1, [pc, #136]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	60cb      	str	r3, [r1, #12]
 8000aa0:	e006      	b.n	8000ab0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aa2:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aa4:	68da      	ldr	r2, [r3, #12]
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	491e      	ldr	r1, [pc, #120]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d006      	beq.n	8000aca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	4918      	ldr	r1, [pc, #96]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	604b      	str	r3, [r1, #4]
 8000ac8:	e006      	b.n	8000ad8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4914      	ldr	r1, [pc, #80]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d021      	beq.n	8000b28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	490e      	ldr	r1, [pc, #56]	@ (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000aea:	69bb      	ldr	r3, [r7, #24]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	600b      	str	r3, [r1, #0]
 8000af0:	e021      	b.n	8000b36 <HAL_GPIO_Init+0x2e2>
 8000af2:	bf00      	nop
 8000af4:	10320000 	.word	0x10320000
 8000af8:	10310000 	.word	0x10310000
 8000afc:	10220000 	.word	0x10220000
 8000b00:	10210000 	.word	0x10210000
 8000b04:	10120000 	.word	0x10120000
 8000b08:	10110000 	.word	0x10110000
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	40010c00 	.word	0x40010c00
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40011400 	.word	0x40011400
 8000b24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <HAL_GPIO_Init+0x304>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	43db      	mvns	r3, r3
 8000b30:	4909      	ldr	r1, [pc, #36]	@ (8000b58 <HAL_GPIO_Init+0x304>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b38:	3301      	adds	r3, #1
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	fa22 f303 	lsr.w	r3, r2, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f47f ae8e 	bne.w	8000868 <HAL_GPIO_Init+0x14>
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	372c      	adds	r7, #44	@ 0x2c
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40010400 	.word	0x40010400

08000b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b6c:	787b      	ldrb	r3, [r7, #1]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b78:	e003      	b.n	8000b82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	041a      	lsls	r2, r3, #16
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	611a      	str	r2, [r3, #16]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	460b      	mov	r3, r1
 8000b96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b9e:	887a      	ldrh	r2, [r7, #2]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	041a      	lsls	r2, r3, #16
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43d9      	mvns	r1, r3
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	400b      	ands	r3, r1
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	611a      	str	r2, [r3, #16]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d101      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e272      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8087 	beq.w	8000cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be0:	4b92      	ldr	r3, [pc, #584]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 030c 	and.w	r3, r3, #12
 8000be8:	2b04      	cmp	r3, #4
 8000bea:	d00c      	beq.n	8000c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bec:	4b8f      	ldr	r3, [pc, #572]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 030c 	and.w	r3, r3, #12
 8000bf4:	2b08      	cmp	r3, #8
 8000bf6:	d112      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
 8000bf8:	4b8c      	ldr	r3, [pc, #560]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c04:	d10b      	bne.n	8000c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c06:	4b89      	ldr	r3, [pc, #548]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d06c      	beq.n	8000cec <HAL_RCC_OscConfig+0x12c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d168      	bne.n	8000cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e24c      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c26:	d106      	bne.n	8000c36 <HAL_RCC_OscConfig+0x76>
 8000c28:	4b80      	ldr	r3, [pc, #512]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a7f      	ldr	r2, [pc, #508]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e02e      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10c      	bne.n	8000c58 <HAL_RCC_OscConfig+0x98>
 8000c3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a7a      	ldr	r2, [pc, #488]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	4b78      	ldr	r3, [pc, #480]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a77      	ldr	r2, [pc, #476]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e01d      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0xbc>
 8000c62:	4b72      	ldr	r3, [pc, #456]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a71      	ldr	r2, [pc, #452]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b6f      	ldr	r3, [pc, #444]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a6e      	ldr	r2, [pc, #440]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e00b      	b.n	8000c94 <HAL_RCC_OscConfig+0xd4>
 8000c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a6a      	ldr	r2, [pc, #424]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	4b68      	ldr	r3, [pc, #416]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a67      	ldr	r2, [pc, #412]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fcc8 	bl	8000630 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca4:	f7ff fcc4 	bl	8000630 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b64      	cmp	r3, #100	@ 0x64
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e200      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0xe4>
 8000cc2:	e014      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc4:	f7ff fcb4 	bl	8000630 <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ccc:	f7ff fcb0 	bl	8000630 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b64      	cmp	r3, #100	@ 0x64
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e1ec      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cde:	4b53      	ldr	r3, [pc, #332]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f0      	bne.n	8000ccc <HAL_RCC_OscConfig+0x10c>
 8000cea:	e000      	b.n	8000cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d063      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f003 030c 	and.w	r3, r3, #12
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d00b      	beq.n	8000d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d06:	4b49      	ldr	r3, [pc, #292]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 030c 	and.w	r3, r3, #12
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d11c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
 8000d12:	4b46      	ldr	r3, [pc, #280]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d116      	bne.n	8000d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1e:	4b43      	ldr	r3, [pc, #268]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d005      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d001      	beq.n	8000d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e1c0      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d36:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	4939      	ldr	r1, [pc, #228]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4a:	e03a      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d020      	beq.n	8000d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d54:	4b36      	ldr	r3, [pc, #216]	@ (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fc69 	bl	8000630 <HAL_GetTick>
 8000d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d62:	f7ff fc65 	bl	8000630 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e1a1      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	4b2d      	ldr	r3, [pc, #180]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d80:	4b2a      	ldr	r3, [pc, #168]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4927      	ldr	r1, [pc, #156]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000d90:	4313      	orrs	r3, r2
 8000d92:	600b      	str	r3, [r1, #0]
 8000d94:	e015      	b.n	8000dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <HAL_RCC_OscConfig+0x270>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc48 	bl	8000630 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc44 	bl	8000630 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e180      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000db6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d03a      	beq.n	8000e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d019      	beq.n	8000e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dd6:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fc28 	bl	8000630 <HAL_GetTick>
 8000de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de2:	e008      	b.n	8000df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de4:	f7ff fc24 	bl	8000630 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d901      	bls.n	8000df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e160      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <HAL_RCC_OscConfig+0x26c>)
 8000df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f0      	beq.n	8000de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 fa9c 	bl	8001340 <RCC_Delay>
 8000e08:	e01c      	b.n	8000e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_RCC_OscConfig+0x274>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e10:	f7ff fc0e 	bl	8000630 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e16:	e00f      	b.n	8000e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc0a 	bl	8000630 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d908      	bls.n	8000e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e146      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	42420000 	.word	0x42420000
 8000e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e38:	4b92      	ldr	r3, [pc, #584]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1e9      	bne.n	8000e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 80a6 	beq.w	8000f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e56:	4b8b      	ldr	r3, [pc, #556]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d10d      	bne.n	8000e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	4b88      	ldr	r3, [pc, #544]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	4a87      	ldr	r2, [pc, #540]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e6c:	61d3      	str	r3, [r2, #28]
 8000e6e:	4b85      	ldr	r3, [pc, #532]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e7e:	4b82      	ldr	r3, [pc, #520]	@ (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d118      	bne.n	8000ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e96:	f7ff fbcb 	bl	8000630 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	e008      	b.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9e:	f7ff fbc7 	bl	8000630 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2b64      	cmp	r3, #100	@ 0x64
 8000eaa:	d901      	bls.n	8000eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eac:	2303      	movs	r3, #3
 8000eae:	e103      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb0:	4b75      	ldr	r3, [pc, #468]	@ (8001088 <HAL_RCC_OscConfig+0x4c8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d0f0      	beq.n	8000e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x312>
 8000ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6213      	str	r3, [r2, #32]
 8000ed0:	e02d      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x334>
 8000eda:	4b6a      	ldr	r3, [pc, #424]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a69      	ldr	r2, [pc, #420]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	6213      	str	r3, [r2, #32]
 8000ee6:	4b67      	ldr	r3, [pc, #412]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a66      	ldr	r2, [pc, #408]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	e01c      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	2b05      	cmp	r3, #5
 8000efa:	d10c      	bne.n	8000f16 <HAL_RCC_OscConfig+0x356>
 8000efc:	4b61      	ldr	r3, [pc, #388]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	4a60      	ldr	r2, [pc, #384]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6213      	str	r3, [r2, #32]
 8000f08:	4b5e      	ldr	r3, [pc, #376]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6213      	str	r3, [r2, #32]
 8000f14:	e00b      	b.n	8000f2e <HAL_RCC_OscConfig+0x36e>
 8000f16:	4b5b      	ldr	r3, [pc, #364]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	f023 0301 	bic.w	r3, r3, #1
 8000f20:	6213      	str	r3, [r2, #32]
 8000f22:	4b58      	ldr	r3, [pc, #352]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	6a1b      	ldr	r3, [r3, #32]
 8000f26:	4a57      	ldr	r2, [pc, #348]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	f023 0304 	bic.w	r3, r3, #4
 8000f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d015      	beq.n	8000f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f36:	f7ff fb7b 	bl	8000630 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fb77 	bl	8000630 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e0b1      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f54:	4b4b      	ldr	r3, [pc, #300]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0ee      	beq.n	8000f3e <HAL_RCC_OscConfig+0x37e>
 8000f60:	e014      	b.n	8000f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f62:	f7ff fb65 	bl	8000630 <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	e00a      	b.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6a:	f7ff fb61 	bl	8000630 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e09b      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f80:	4b40      	ldr	r3, [pc, #256]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d1ee      	bne.n	8000f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f8c:	7dfb      	ldrb	r3, [r7, #23]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d105      	bne.n	8000f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f92:	4b3c      	ldr	r3, [pc, #240]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a3b      	ldr	r2, [pc, #236]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8087 	beq.w	80010b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fa8:	4b36      	ldr	r3, [pc, #216]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 030c 	and.w	r3, r3, #12
 8000fb0:	2b08      	cmp	r3, #8
 8000fb2:	d061      	beq.n	8001078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d146      	bne.n	800104a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbc:	4b33      	ldr	r3, [pc, #204]	@ (800108c <HAL_RCC_OscConfig+0x4cc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fb35 	bl	8000630 <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fca:	f7ff fb31 	bl	8000630 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e06d      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fdc:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff0:	d108      	bne.n	8001004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff2:	4b24      	ldr	r3, [pc, #144]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4921      	ldr	r1, [pc, #132]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a19      	ldr	r1, [r3, #32]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001014:	430b      	orrs	r3, r1
 8001016:	491b      	ldr	r1, [pc, #108]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <HAL_RCC_OscConfig+0x4cc>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fb05 	bl	8000630 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fb01 	bl	8000630 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e03d      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800103c:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x46a>
 8001048:	e035      	b.n	80010b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <HAL_RCC_OscConfig+0x4cc>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff faee 	bl	8000630 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff faea 	bl	8000630 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e026      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x498>
 8001076:	e01e      	b.n	80010b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e019      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
 8001084:	40021000 	.word	0x40021000
 8001088:	40007000 	.word	0x40007000
 800108c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <HAL_RCC_OscConfig+0x500>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d106      	bne.n	80010b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d001      	beq.n	80010b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0d0      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d910      	bls.n	8001108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e6:	4b67      	ldr	r3, [pc, #412]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 0207 	bic.w	r2, r3, #7
 80010ee:	4965      	ldr	r1, [pc, #404]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f6:	4b63      	ldr	r3, [pc, #396]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0b8      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d020      	beq.n	8001156 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001120:	4b59      	ldr	r3, [pc, #356]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4a58      	ldr	r2, [pc, #352]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800112a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001138:	4b53      	ldr	r3, [pc, #332]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001142:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001144:	4b50      	ldr	r3, [pc, #320]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	494d      	ldr	r1, [pc, #308]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	4313      	orrs	r3, r2
 8001154:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d040      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d107      	bne.n	800117a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b47      	ldr	r3, [pc, #284]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d115      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e07f      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d107      	bne.n	8001192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001182:	4b41      	ldr	r3, [pc, #260]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d109      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e073      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	4b3d      	ldr	r3, [pc, #244]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e06b      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a2:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f023 0203 	bic.w	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4936      	ldr	r1, [pc, #216]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b4:	f7ff fa3c 	bl	8000630 <HAL_GetTick>
 80011b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011bc:	f7ff fa38 	bl	8000630 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e053      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 020c 	and.w	r2, r3, #12
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d1eb      	bne.n	80011bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e4:	4b27      	ldr	r3, [pc, #156]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d210      	bcs.n	8001214 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b24      	ldr	r3, [pc, #144]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 0207 	bic.w	r2, r3, #7
 80011fa:	4922      	ldr	r1, [pc, #136]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	4313      	orrs	r3, r2
 8001200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001202:	4b20      	ldr	r3, [pc, #128]	@ (8001284 <HAL_RCC_ClockConfig+0x1c0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d001      	beq.n	8001214 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e032      	b.n	800127a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	4916      	ldr	r1, [pc, #88]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	2b00      	cmp	r3, #0
 800123c:	d009      	beq.n	8001252 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	490e      	ldr	r1, [pc, #56]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001252:	f000 f821 	bl	8001298 <HAL_RCC_GetSysClockFreq>
 8001256:	4602      	mov	r2, r0
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	490a      	ldr	r1, [pc, #40]	@ (800128c <HAL_RCC_ClockConfig+0x1c8>)
 8001264:	5ccb      	ldrb	r3, [r1, r3]
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	4a09      	ldr	r2, [pc, #36]	@ (8001290 <HAL_RCC_ClockConfig+0x1cc>)
 800126c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800126e:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <HAL_RCC_ClockConfig+0x1d0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f99a 	bl	80005ac <HAL_InitTick>

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40022000 	.word	0x40022000
 8001288:	40021000 	.word	0x40021000
 800128c:	08002250 	.word	0x08002250
 8001290:	20000000 	.word	0x20000000
 8001294:	20000004 	.word	0x20000004

08001298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <HAL_RCC_GetSysClockFreq+0x94>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d002      	beq.n	80012c8 <HAL_RCC_GetSysClockFreq+0x30>
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d003      	beq.n	80012ce <HAL_RCC_GetSysClockFreq+0x36>
 80012c6:	e027      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012c8:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ca:	613b      	str	r3, [r7, #16]
      break;
 80012cc:	e027      	b.n	800131e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	0c9b      	lsrs	r3, r3, #18
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d010      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_RCC_GetSysClockFreq+0x94>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0c5b      	lsrs	r3, r3, #17
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x98>)
 80012fa:	fb03 f202 	mul.w	r2, r3, r2
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	fbb2 f3f3 	udiv	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e004      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a0c      	ldr	r2, [pc, #48]	@ (800133c <HAL_RCC_GetSysClockFreq+0xa4>)
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	613b      	str	r3, [r7, #16]
      break;
 8001316:	e002      	b.n	800131e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_RCC_GetSysClockFreq+0x98>)
 800131a:	613b      	str	r3, [r7, #16]
      break;
 800131c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800131e:	693b      	ldr	r3, [r7, #16]
}
 8001320:	4618      	mov	r0, r3
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000
 8001330:	007a1200 	.word	0x007a1200
 8001334:	08002260 	.word	0x08002260
 8001338:	08002270 	.word	0x08002270
 800133c:	003d0900 	.word	0x003d0900

08001340 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <RCC_Delay+0x34>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <RCC_Delay+0x38>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0a5b      	lsrs	r3, r3, #9
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800135c:	bf00      	nop
  }
  while (Delay --);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	60fa      	str	r2, [r7, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1f9      	bne.n	800135c <RCC_Delay+0x1c>
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000000 	.word	0x20000000
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <__sflush_r>:
 800137c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	0716      	lsls	r6, r2, #28
 8001384:	4605      	mov	r5, r0
 8001386:	460c      	mov	r4, r1
 8001388:	d454      	bmi.n	8001434 <__sflush_r+0xb8>
 800138a:	684b      	ldr	r3, [r1, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dc02      	bgt.n	8001396 <__sflush_r+0x1a>
 8001390:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	dd48      	ble.n	8001428 <__sflush_r+0xac>
 8001396:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001398:	2e00      	cmp	r6, #0
 800139a:	d045      	beq.n	8001428 <__sflush_r+0xac>
 800139c:	2300      	movs	r3, #0
 800139e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80013a2:	682f      	ldr	r7, [r5, #0]
 80013a4:	6a21      	ldr	r1, [r4, #32]
 80013a6:	602b      	str	r3, [r5, #0]
 80013a8:	d030      	beq.n	800140c <__sflush_r+0x90>
 80013aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80013ac:	89a3      	ldrh	r3, [r4, #12]
 80013ae:	0759      	lsls	r1, r3, #29
 80013b0:	d505      	bpl.n	80013be <__sflush_r+0x42>
 80013b2:	6863      	ldr	r3, [r4, #4]
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013b8:	b10b      	cbz	r3, 80013be <__sflush_r+0x42>
 80013ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013bc:	1ad2      	subs	r2, r2, r3
 80013be:	2300      	movs	r3, #0
 80013c0:	4628      	mov	r0, r5
 80013c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80013c4:	6a21      	ldr	r1, [r4, #32]
 80013c6:	47b0      	blx	r6
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	89a3      	ldrh	r3, [r4, #12]
 80013cc:	d106      	bne.n	80013dc <__sflush_r+0x60>
 80013ce:	6829      	ldr	r1, [r5, #0]
 80013d0:	291d      	cmp	r1, #29
 80013d2:	d82b      	bhi.n	800142c <__sflush_r+0xb0>
 80013d4:	4a28      	ldr	r2, [pc, #160]	@ (8001478 <__sflush_r+0xfc>)
 80013d6:	410a      	asrs	r2, r1
 80013d8:	07d6      	lsls	r6, r2, #31
 80013da:	d427      	bmi.n	800142c <__sflush_r+0xb0>
 80013dc:	2200      	movs	r2, #0
 80013de:	6062      	str	r2, [r4, #4]
 80013e0:	6922      	ldr	r2, [r4, #16]
 80013e2:	04d9      	lsls	r1, r3, #19
 80013e4:	6022      	str	r2, [r4, #0]
 80013e6:	d504      	bpl.n	80013f2 <__sflush_r+0x76>
 80013e8:	1c42      	adds	r2, r0, #1
 80013ea:	d101      	bne.n	80013f0 <__sflush_r+0x74>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b903      	cbnz	r3, 80013f2 <__sflush_r+0x76>
 80013f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80013f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013f4:	602f      	str	r7, [r5, #0]
 80013f6:	b1b9      	cbz	r1, 8001428 <__sflush_r+0xac>
 80013f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013fc:	4299      	cmp	r1, r3
 80013fe:	d002      	beq.n	8001406 <__sflush_r+0x8a>
 8001400:	4628      	mov	r0, r5
 8001402:	f000 fa0b 	bl	800181c <_free_r>
 8001406:	2300      	movs	r3, #0
 8001408:	6363      	str	r3, [r4, #52]	@ 0x34
 800140a:	e00d      	b.n	8001428 <__sflush_r+0xac>
 800140c:	2301      	movs	r3, #1
 800140e:	4628      	mov	r0, r5
 8001410:	47b0      	blx	r6
 8001412:	4602      	mov	r2, r0
 8001414:	1c50      	adds	r0, r2, #1
 8001416:	d1c9      	bne.n	80013ac <__sflush_r+0x30>
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0c6      	beq.n	80013ac <__sflush_r+0x30>
 800141e:	2b1d      	cmp	r3, #29
 8001420:	d001      	beq.n	8001426 <__sflush_r+0xaa>
 8001422:	2b16      	cmp	r3, #22
 8001424:	d11d      	bne.n	8001462 <__sflush_r+0xe6>
 8001426:	602f      	str	r7, [r5, #0]
 8001428:	2000      	movs	r0, #0
 800142a:	e021      	b.n	8001470 <__sflush_r+0xf4>
 800142c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001430:	b21b      	sxth	r3, r3
 8001432:	e01a      	b.n	800146a <__sflush_r+0xee>
 8001434:	690f      	ldr	r7, [r1, #16]
 8001436:	2f00      	cmp	r7, #0
 8001438:	d0f6      	beq.n	8001428 <__sflush_r+0xac>
 800143a:	0793      	lsls	r3, r2, #30
 800143c:	bf18      	it	ne
 800143e:	2300      	movne	r3, #0
 8001440:	680e      	ldr	r6, [r1, #0]
 8001442:	bf08      	it	eq
 8001444:	694b      	ldreq	r3, [r1, #20]
 8001446:	1bf6      	subs	r6, r6, r7
 8001448:	600f      	str	r7, [r1, #0]
 800144a:	608b      	str	r3, [r1, #8]
 800144c:	2e00      	cmp	r6, #0
 800144e:	ddeb      	ble.n	8001428 <__sflush_r+0xac>
 8001450:	4633      	mov	r3, r6
 8001452:	463a      	mov	r2, r7
 8001454:	4628      	mov	r0, r5
 8001456:	6a21      	ldr	r1, [r4, #32]
 8001458:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800145c:	47e0      	blx	ip
 800145e:	2800      	cmp	r0, #0
 8001460:	dc07      	bgt.n	8001472 <__sflush_r+0xf6>
 8001462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800146a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800146e:	81a3      	strh	r3, [r4, #12]
 8001470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001472:	4407      	add	r7, r0
 8001474:	1a36      	subs	r6, r6, r0
 8001476:	e7e9      	b.n	800144c <__sflush_r+0xd0>
 8001478:	dfbffffe 	.word	0xdfbffffe

0800147c <_fflush_r>:
 800147c:	b538      	push	{r3, r4, r5, lr}
 800147e:	690b      	ldr	r3, [r1, #16]
 8001480:	4605      	mov	r5, r0
 8001482:	460c      	mov	r4, r1
 8001484:	b913      	cbnz	r3, 800148c <_fflush_r+0x10>
 8001486:	2500      	movs	r5, #0
 8001488:	4628      	mov	r0, r5
 800148a:	bd38      	pop	{r3, r4, r5, pc}
 800148c:	b118      	cbz	r0, 8001496 <_fflush_r+0x1a>
 800148e:	6a03      	ldr	r3, [r0, #32]
 8001490:	b90b      	cbnz	r3, 8001496 <_fflush_r+0x1a>
 8001492:	f000 f8bb 	bl	800160c <__sinit>
 8001496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f3      	beq.n	8001486 <_fflush_r+0xa>
 800149e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80014a0:	07d0      	lsls	r0, r2, #31
 80014a2:	d404      	bmi.n	80014ae <_fflush_r+0x32>
 80014a4:	0599      	lsls	r1, r3, #22
 80014a6:	d402      	bmi.n	80014ae <_fflush_r+0x32>
 80014a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014aa:	f000 f9b4 	bl	8001816 <__retarget_lock_acquire_recursive>
 80014ae:	4628      	mov	r0, r5
 80014b0:	4621      	mov	r1, r4
 80014b2:	f7ff ff63 	bl	800137c <__sflush_r>
 80014b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80014b8:	4605      	mov	r5, r0
 80014ba:	07da      	lsls	r2, r3, #31
 80014bc:	d4e4      	bmi.n	8001488 <_fflush_r+0xc>
 80014be:	89a3      	ldrh	r3, [r4, #12]
 80014c0:	059b      	lsls	r3, r3, #22
 80014c2:	d4e1      	bmi.n	8001488 <_fflush_r+0xc>
 80014c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80014c6:	f000 f9a7 	bl	8001818 <__retarget_lock_release_recursive>
 80014ca:	e7dd      	b.n	8001488 <_fflush_r+0xc>

080014cc <fflush>:
 80014cc:	4601      	mov	r1, r0
 80014ce:	b920      	cbnz	r0, 80014da <fflush+0xe>
 80014d0:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <fflush+0x18>)
 80014d2:	4905      	ldr	r1, [pc, #20]	@ (80014e8 <fflush+0x1c>)
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <fflush+0x20>)
 80014d6:	f000 b8b1 	b.w	800163c <_fwalk_sglue>
 80014da:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <fflush+0x24>)
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	f7ff bfcd 	b.w	800147c <_fflush_r>
 80014e2:	bf00      	nop
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	0800147d 	.word	0x0800147d
 80014ec:	2000001c 	.word	0x2000001c
 80014f0:	20000018 	.word	0x20000018

080014f4 <std>:
 80014f4:	2300      	movs	r3, #0
 80014f6:	b510      	push	{r4, lr}
 80014f8:	4604      	mov	r4, r0
 80014fa:	e9c0 3300 	strd	r3, r3, [r0]
 80014fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001502:	6083      	str	r3, [r0, #8]
 8001504:	8181      	strh	r1, [r0, #12]
 8001506:	6643      	str	r3, [r0, #100]	@ 0x64
 8001508:	81c2      	strh	r2, [r0, #14]
 800150a:	6183      	str	r3, [r0, #24]
 800150c:	4619      	mov	r1, r3
 800150e:	2208      	movs	r2, #8
 8001510:	305c      	adds	r0, #92	@ 0x5c
 8001512:	f000 f906 	bl	8001722 <memset>
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <std+0x58>)
 8001518:	6224      	str	r4, [r4, #32]
 800151a:	6263      	str	r3, [r4, #36]	@ 0x24
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <std+0x5c>)
 800151e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <std+0x60>)
 8001522:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <std+0x64>)
 8001526:	6323      	str	r3, [r4, #48]	@ 0x30
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <std+0x68>)
 800152a:	429c      	cmp	r4, r3
 800152c:	d006      	beq.n	800153c <std+0x48>
 800152e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001532:	4294      	cmp	r4, r2
 8001534:	d002      	beq.n	800153c <std+0x48>
 8001536:	33d0      	adds	r3, #208	@ 0xd0
 8001538:	429c      	cmp	r4, r3
 800153a:	d105      	bne.n	8001548 <std+0x54>
 800153c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001544:	f000 b966 	b.w	8001814 <__retarget_lock_init_recursive>
 8001548:	bd10      	pop	{r4, pc}
 800154a:	bf00      	nop
 800154c:	0800169d 	.word	0x0800169d
 8001550:	080016bf 	.word	0x080016bf
 8001554:	080016f7 	.word	0x080016f7
 8001558:	0800171b 	.word	0x0800171b
 800155c:	20000090 	.word	0x20000090

08001560 <stdio_exit_handler>:
 8001560:	4a02      	ldr	r2, [pc, #8]	@ (800156c <stdio_exit_handler+0xc>)
 8001562:	4903      	ldr	r1, [pc, #12]	@ (8001570 <stdio_exit_handler+0x10>)
 8001564:	4803      	ldr	r0, [pc, #12]	@ (8001574 <stdio_exit_handler+0x14>)
 8001566:	f000 b869 	b.w	800163c <_fwalk_sglue>
 800156a:	bf00      	nop
 800156c:	2000000c 	.word	0x2000000c
 8001570:	0800147d 	.word	0x0800147d
 8001574:	2000001c 	.word	0x2000001c

08001578 <cleanup_stdio>:
 8001578:	6841      	ldr	r1, [r0, #4]
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <cleanup_stdio+0x34>)
 800157c:	b510      	push	{r4, lr}
 800157e:	4299      	cmp	r1, r3
 8001580:	4604      	mov	r4, r0
 8001582:	d001      	beq.n	8001588 <cleanup_stdio+0x10>
 8001584:	f7ff ff7a 	bl	800147c <_fflush_r>
 8001588:	68a1      	ldr	r1, [r4, #8]
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <cleanup_stdio+0x38>)
 800158c:	4299      	cmp	r1, r3
 800158e:	d002      	beq.n	8001596 <cleanup_stdio+0x1e>
 8001590:	4620      	mov	r0, r4
 8001592:	f7ff ff73 	bl	800147c <_fflush_r>
 8001596:	68e1      	ldr	r1, [r4, #12]
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <cleanup_stdio+0x3c>)
 800159a:	4299      	cmp	r1, r3
 800159c:	d004      	beq.n	80015a8 <cleanup_stdio+0x30>
 800159e:	4620      	mov	r0, r4
 80015a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015a4:	f7ff bf6a 	b.w	800147c <_fflush_r>
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	bf00      	nop
 80015ac:	20000090 	.word	0x20000090
 80015b0:	200000f8 	.word	0x200000f8
 80015b4:	20000160 	.word	0x20000160

080015b8 <global_stdio_init.part.0>:
 80015b8:	b510      	push	{r4, lr}
 80015ba:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <global_stdio_init.part.0+0x30>)
 80015bc:	4c0b      	ldr	r4, [pc, #44]	@ (80015ec <global_stdio_init.part.0+0x34>)
 80015be:	4a0c      	ldr	r2, [pc, #48]	@ (80015f0 <global_stdio_init.part.0+0x38>)
 80015c0:	4620      	mov	r0, r4
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	2104      	movs	r1, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	f7ff ff94 	bl	80014f4 <std>
 80015cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80015d0:	2201      	movs	r2, #1
 80015d2:	2109      	movs	r1, #9
 80015d4:	f7ff ff8e 	bl	80014f4 <std>
 80015d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80015dc:	2202      	movs	r2, #2
 80015de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015e2:	2112      	movs	r1, #18
 80015e4:	f7ff bf86 	b.w	80014f4 <std>
 80015e8:	200001c8 	.word	0x200001c8
 80015ec:	20000090 	.word	0x20000090
 80015f0:	08001561 	.word	0x08001561

080015f4 <__sfp_lock_acquire>:
 80015f4:	4801      	ldr	r0, [pc, #4]	@ (80015fc <__sfp_lock_acquire+0x8>)
 80015f6:	f000 b90e 	b.w	8001816 <__retarget_lock_acquire_recursive>
 80015fa:	bf00      	nop
 80015fc:	200001d1 	.word	0x200001d1

08001600 <__sfp_lock_release>:
 8001600:	4801      	ldr	r0, [pc, #4]	@ (8001608 <__sfp_lock_release+0x8>)
 8001602:	f000 b909 	b.w	8001818 <__retarget_lock_release_recursive>
 8001606:	bf00      	nop
 8001608:	200001d1 	.word	0x200001d1

0800160c <__sinit>:
 800160c:	b510      	push	{r4, lr}
 800160e:	4604      	mov	r4, r0
 8001610:	f7ff fff0 	bl	80015f4 <__sfp_lock_acquire>
 8001614:	6a23      	ldr	r3, [r4, #32]
 8001616:	b11b      	cbz	r3, 8001620 <__sinit+0x14>
 8001618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800161c:	f7ff bff0 	b.w	8001600 <__sfp_lock_release>
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <__sinit+0x28>)
 8001622:	6223      	str	r3, [r4, #32]
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <__sinit+0x2c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f5      	bne.n	8001618 <__sinit+0xc>
 800162c:	f7ff ffc4 	bl	80015b8 <global_stdio_init.part.0>
 8001630:	e7f2      	b.n	8001618 <__sinit+0xc>
 8001632:	bf00      	nop
 8001634:	08001579 	.word	0x08001579
 8001638:	200001c8 	.word	0x200001c8

0800163c <_fwalk_sglue>:
 800163c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001640:	4607      	mov	r7, r0
 8001642:	4688      	mov	r8, r1
 8001644:	4614      	mov	r4, r2
 8001646:	2600      	movs	r6, #0
 8001648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800164c:	f1b9 0901 	subs.w	r9, r9, #1
 8001650:	d505      	bpl.n	800165e <_fwalk_sglue+0x22>
 8001652:	6824      	ldr	r4, [r4, #0]
 8001654:	2c00      	cmp	r4, #0
 8001656:	d1f7      	bne.n	8001648 <_fwalk_sglue+0xc>
 8001658:	4630      	mov	r0, r6
 800165a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800165e:	89ab      	ldrh	r3, [r5, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d907      	bls.n	8001674 <_fwalk_sglue+0x38>
 8001664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001668:	3301      	adds	r3, #1
 800166a:	d003      	beq.n	8001674 <_fwalk_sglue+0x38>
 800166c:	4629      	mov	r1, r5
 800166e:	4638      	mov	r0, r7
 8001670:	47c0      	blx	r8
 8001672:	4306      	orrs	r6, r0
 8001674:	3568      	adds	r5, #104	@ 0x68
 8001676:	e7e9      	b.n	800164c <_fwalk_sglue+0x10>

08001678 <iprintf>:
 8001678:	b40f      	push	{r0, r1, r2, r3}
 800167a:	b507      	push	{r0, r1, r2, lr}
 800167c:	4906      	ldr	r1, [pc, #24]	@ (8001698 <iprintf+0x20>)
 800167e:	ab04      	add	r3, sp, #16
 8001680:	6808      	ldr	r0, [r1, #0]
 8001682:	f853 2b04 	ldr.w	r2, [r3], #4
 8001686:	6881      	ldr	r1, [r0, #8]
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	f000 f9e5 	bl	8001a58 <_vfiprintf_r>
 800168e:	b003      	add	sp, #12
 8001690:	f85d eb04 	ldr.w	lr, [sp], #4
 8001694:	b004      	add	sp, #16
 8001696:	4770      	bx	lr
 8001698:	20000018 	.word	0x20000018

0800169c <__sread>:
 800169c:	b510      	push	{r4, lr}
 800169e:	460c      	mov	r4, r1
 80016a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016a4:	f000 f868 	bl	8001778 <_read_r>
 80016a8:	2800      	cmp	r0, #0
 80016aa:	bfab      	itete	ge
 80016ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80016ae:	89a3      	ldrhlt	r3, [r4, #12]
 80016b0:	181b      	addge	r3, r3, r0
 80016b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80016b6:	bfac      	ite	ge
 80016b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80016ba:	81a3      	strhlt	r3, [r4, #12]
 80016bc:	bd10      	pop	{r4, pc}

080016be <__swrite>:
 80016be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016c2:	461f      	mov	r7, r3
 80016c4:	898b      	ldrh	r3, [r1, #12]
 80016c6:	4605      	mov	r5, r0
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	460c      	mov	r4, r1
 80016cc:	4616      	mov	r6, r2
 80016ce:	d505      	bpl.n	80016dc <__swrite+0x1e>
 80016d0:	2302      	movs	r3, #2
 80016d2:	2200      	movs	r2, #0
 80016d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016d8:	f000 f83c 	bl	8001754 <_lseek_r>
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	4632      	mov	r2, r6
 80016e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016e4:	81a3      	strh	r3, [r4, #12]
 80016e6:	4628      	mov	r0, r5
 80016e8:	463b      	mov	r3, r7
 80016ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016f2:	f000 b853 	b.w	800179c <_write_r>

080016f6 <__sseek>:
 80016f6:	b510      	push	{r4, lr}
 80016f8:	460c      	mov	r4, r1
 80016fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016fe:	f000 f829 	bl	8001754 <_lseek_r>
 8001702:	1c43      	adds	r3, r0, #1
 8001704:	89a3      	ldrh	r3, [r4, #12]
 8001706:	bf15      	itete	ne
 8001708:	6560      	strne	r0, [r4, #84]	@ 0x54
 800170a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800170e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001712:	81a3      	strheq	r3, [r4, #12]
 8001714:	bf18      	it	ne
 8001716:	81a3      	strhne	r3, [r4, #12]
 8001718:	bd10      	pop	{r4, pc}

0800171a <__sclose>:
 800171a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800171e:	f000 b809 	b.w	8001734 <_close_r>

08001722 <memset>:
 8001722:	4603      	mov	r3, r0
 8001724:	4402      	add	r2, r0
 8001726:	4293      	cmp	r3, r2
 8001728:	d100      	bne.n	800172c <memset+0xa>
 800172a:	4770      	bx	lr
 800172c:	f803 1b01 	strb.w	r1, [r3], #1
 8001730:	e7f9      	b.n	8001726 <memset+0x4>
	...

08001734 <_close_r>:
 8001734:	b538      	push	{r3, r4, r5, lr}
 8001736:	2300      	movs	r3, #0
 8001738:	4d05      	ldr	r5, [pc, #20]	@ (8001750 <_close_r+0x1c>)
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	602b      	str	r3, [r5, #0]
 8001740:	f7fe fe8b 	bl	800045a <_close>
 8001744:	1c43      	adds	r3, r0, #1
 8001746:	d102      	bne.n	800174e <_close_r+0x1a>
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	b103      	cbz	r3, 800174e <_close_r+0x1a>
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	bd38      	pop	{r3, r4, r5, pc}
 8001750:	200001cc 	.word	0x200001cc

08001754 <_lseek_r>:
 8001754:	b538      	push	{r3, r4, r5, lr}
 8001756:	4604      	mov	r4, r0
 8001758:	4608      	mov	r0, r1
 800175a:	4611      	mov	r1, r2
 800175c:	2200      	movs	r2, #0
 800175e:	4d05      	ldr	r5, [pc, #20]	@ (8001774 <_lseek_r+0x20>)
 8001760:	602a      	str	r2, [r5, #0]
 8001762:	461a      	mov	r2, r3
 8001764:	f7fe fe9d 	bl	80004a2 <_lseek>
 8001768:	1c43      	adds	r3, r0, #1
 800176a:	d102      	bne.n	8001772 <_lseek_r+0x1e>
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	b103      	cbz	r3, 8001772 <_lseek_r+0x1e>
 8001770:	6023      	str	r3, [r4, #0]
 8001772:	bd38      	pop	{r3, r4, r5, pc}
 8001774:	200001cc 	.word	0x200001cc

08001778 <_read_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	4604      	mov	r4, r0
 800177c:	4608      	mov	r0, r1
 800177e:	4611      	mov	r1, r2
 8001780:	2200      	movs	r2, #0
 8001782:	4d05      	ldr	r5, [pc, #20]	@ (8001798 <_read_r+0x20>)
 8001784:	602a      	str	r2, [r5, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	f7fe fe4a 	bl	8000420 <_read>
 800178c:	1c43      	adds	r3, r0, #1
 800178e:	d102      	bne.n	8001796 <_read_r+0x1e>
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	b103      	cbz	r3, 8001796 <_read_r+0x1e>
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	bd38      	pop	{r3, r4, r5, pc}
 8001798:	200001cc 	.word	0x200001cc

0800179c <_write_r>:
 800179c:	b538      	push	{r3, r4, r5, lr}
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	4611      	mov	r1, r2
 80017a4:	2200      	movs	r2, #0
 80017a6:	4d05      	ldr	r5, [pc, #20]	@ (80017bc <_write_r+0x20>)
 80017a8:	602a      	str	r2, [r5, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	f7fe fcf4 	bl	8000198 <_write>
 80017b0:	1c43      	adds	r3, r0, #1
 80017b2:	d102      	bne.n	80017ba <_write_r+0x1e>
 80017b4:	682b      	ldr	r3, [r5, #0]
 80017b6:	b103      	cbz	r3, 80017ba <_write_r+0x1e>
 80017b8:	6023      	str	r3, [r4, #0]
 80017ba:	bd38      	pop	{r3, r4, r5, pc}
 80017bc:	200001cc 	.word	0x200001cc

080017c0 <__errno>:
 80017c0:	4b01      	ldr	r3, [pc, #4]	@ (80017c8 <__errno+0x8>)
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000018 	.word	0x20000018

080017cc <__libc_init_array>:
 80017cc:	b570      	push	{r4, r5, r6, lr}
 80017ce:	2600      	movs	r6, #0
 80017d0:	4d0c      	ldr	r5, [pc, #48]	@ (8001804 <__libc_init_array+0x38>)
 80017d2:	4c0d      	ldr	r4, [pc, #52]	@ (8001808 <__libc_init_array+0x3c>)
 80017d4:	1b64      	subs	r4, r4, r5
 80017d6:	10a4      	asrs	r4, r4, #2
 80017d8:	42a6      	cmp	r6, r4
 80017da:	d109      	bne.n	80017f0 <__libc_init_array+0x24>
 80017dc:	f000 fd1c 	bl	8002218 <_init>
 80017e0:	2600      	movs	r6, #0
 80017e2:	4d0a      	ldr	r5, [pc, #40]	@ (800180c <__libc_init_array+0x40>)
 80017e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001810 <__libc_init_array+0x44>)
 80017e6:	1b64      	subs	r4, r4, r5
 80017e8:	10a4      	asrs	r4, r4, #2
 80017ea:	42a6      	cmp	r6, r4
 80017ec:	d105      	bne.n	80017fa <__libc_init_array+0x2e>
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f4:	4798      	blx	r3
 80017f6:	3601      	adds	r6, #1
 80017f8:	e7ee      	b.n	80017d8 <__libc_init_array+0xc>
 80017fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fe:	4798      	blx	r3
 8001800:	3601      	adds	r6, #1
 8001802:	e7f2      	b.n	80017ea <__libc_init_array+0x1e>
 8001804:	080022a8 	.word	0x080022a8
 8001808:	080022a8 	.word	0x080022a8
 800180c:	080022a8 	.word	0x080022a8
 8001810:	080022ac 	.word	0x080022ac

08001814 <__retarget_lock_init_recursive>:
 8001814:	4770      	bx	lr

08001816 <__retarget_lock_acquire_recursive>:
 8001816:	4770      	bx	lr

08001818 <__retarget_lock_release_recursive>:
 8001818:	4770      	bx	lr
	...

0800181c <_free_r>:
 800181c:	b538      	push	{r3, r4, r5, lr}
 800181e:	4605      	mov	r5, r0
 8001820:	2900      	cmp	r1, #0
 8001822:	d040      	beq.n	80018a6 <_free_r+0x8a>
 8001824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001828:	1f0c      	subs	r4, r1, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	bfb8      	it	lt
 800182e:	18e4      	addlt	r4, r4, r3
 8001830:	f000 f8de 	bl	80019f0 <__malloc_lock>
 8001834:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <_free_r+0x8c>)
 8001836:	6813      	ldr	r3, [r2, #0]
 8001838:	b933      	cbnz	r3, 8001848 <_free_r+0x2c>
 800183a:	6063      	str	r3, [r4, #4]
 800183c:	6014      	str	r4, [r2, #0]
 800183e:	4628      	mov	r0, r5
 8001840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001844:	f000 b8da 	b.w	80019fc <__malloc_unlock>
 8001848:	42a3      	cmp	r3, r4
 800184a:	d908      	bls.n	800185e <_free_r+0x42>
 800184c:	6820      	ldr	r0, [r4, #0]
 800184e:	1821      	adds	r1, r4, r0
 8001850:	428b      	cmp	r3, r1
 8001852:	bf01      	itttt	eq
 8001854:	6819      	ldreq	r1, [r3, #0]
 8001856:	685b      	ldreq	r3, [r3, #4]
 8001858:	1809      	addeq	r1, r1, r0
 800185a:	6021      	streq	r1, [r4, #0]
 800185c:	e7ed      	b.n	800183a <_free_r+0x1e>
 800185e:	461a      	mov	r2, r3
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	b10b      	cbz	r3, 8001868 <_free_r+0x4c>
 8001864:	42a3      	cmp	r3, r4
 8001866:	d9fa      	bls.n	800185e <_free_r+0x42>
 8001868:	6811      	ldr	r1, [r2, #0]
 800186a:	1850      	adds	r0, r2, r1
 800186c:	42a0      	cmp	r0, r4
 800186e:	d10b      	bne.n	8001888 <_free_r+0x6c>
 8001870:	6820      	ldr	r0, [r4, #0]
 8001872:	4401      	add	r1, r0
 8001874:	1850      	adds	r0, r2, r1
 8001876:	4283      	cmp	r3, r0
 8001878:	6011      	str	r1, [r2, #0]
 800187a:	d1e0      	bne.n	800183e <_free_r+0x22>
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4408      	add	r0, r1
 8001882:	6010      	str	r0, [r2, #0]
 8001884:	6053      	str	r3, [r2, #4]
 8001886:	e7da      	b.n	800183e <_free_r+0x22>
 8001888:	d902      	bls.n	8001890 <_free_r+0x74>
 800188a:	230c      	movs	r3, #12
 800188c:	602b      	str	r3, [r5, #0]
 800188e:	e7d6      	b.n	800183e <_free_r+0x22>
 8001890:	6820      	ldr	r0, [r4, #0]
 8001892:	1821      	adds	r1, r4, r0
 8001894:	428b      	cmp	r3, r1
 8001896:	bf01      	itttt	eq
 8001898:	6819      	ldreq	r1, [r3, #0]
 800189a:	685b      	ldreq	r3, [r3, #4]
 800189c:	1809      	addeq	r1, r1, r0
 800189e:	6021      	streq	r1, [r4, #0]
 80018a0:	6063      	str	r3, [r4, #4]
 80018a2:	6054      	str	r4, [r2, #4]
 80018a4:	e7cb      	b.n	800183e <_free_r+0x22>
 80018a6:	bd38      	pop	{r3, r4, r5, pc}
 80018a8:	200001d8 	.word	0x200001d8

080018ac <sbrk_aligned>:
 80018ac:	b570      	push	{r4, r5, r6, lr}
 80018ae:	4e0f      	ldr	r6, [pc, #60]	@ (80018ec <sbrk_aligned+0x40>)
 80018b0:	460c      	mov	r4, r1
 80018b2:	6831      	ldr	r1, [r6, #0]
 80018b4:	4605      	mov	r5, r0
 80018b6:	b911      	cbnz	r1, 80018be <sbrk_aligned+0x12>
 80018b8:	f000 fc0c 	bl	80020d4 <_sbrk_r>
 80018bc:	6030      	str	r0, [r6, #0]
 80018be:	4621      	mov	r1, r4
 80018c0:	4628      	mov	r0, r5
 80018c2:	f000 fc07 	bl	80020d4 <_sbrk_r>
 80018c6:	1c43      	adds	r3, r0, #1
 80018c8:	d103      	bne.n	80018d2 <sbrk_aligned+0x26>
 80018ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80018ce:	4620      	mov	r0, r4
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
 80018d2:	1cc4      	adds	r4, r0, #3
 80018d4:	f024 0403 	bic.w	r4, r4, #3
 80018d8:	42a0      	cmp	r0, r4
 80018da:	d0f8      	beq.n	80018ce <sbrk_aligned+0x22>
 80018dc:	1a21      	subs	r1, r4, r0
 80018de:	4628      	mov	r0, r5
 80018e0:	f000 fbf8 	bl	80020d4 <_sbrk_r>
 80018e4:	3001      	adds	r0, #1
 80018e6:	d1f2      	bne.n	80018ce <sbrk_aligned+0x22>
 80018e8:	e7ef      	b.n	80018ca <sbrk_aligned+0x1e>
 80018ea:	bf00      	nop
 80018ec:	200001d4 	.word	0x200001d4

080018f0 <_malloc_r>:
 80018f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018f4:	1ccd      	adds	r5, r1, #3
 80018f6:	f025 0503 	bic.w	r5, r5, #3
 80018fa:	3508      	adds	r5, #8
 80018fc:	2d0c      	cmp	r5, #12
 80018fe:	bf38      	it	cc
 8001900:	250c      	movcc	r5, #12
 8001902:	2d00      	cmp	r5, #0
 8001904:	4606      	mov	r6, r0
 8001906:	db01      	blt.n	800190c <_malloc_r+0x1c>
 8001908:	42a9      	cmp	r1, r5
 800190a:	d904      	bls.n	8001916 <_malloc_r+0x26>
 800190c:	230c      	movs	r3, #12
 800190e:	6033      	str	r3, [r6, #0]
 8001910:	2000      	movs	r0, #0
 8001912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80019ec <_malloc_r+0xfc>
 800191a:	f000 f869 	bl	80019f0 <__malloc_lock>
 800191e:	f8d8 3000 	ldr.w	r3, [r8]
 8001922:	461c      	mov	r4, r3
 8001924:	bb44      	cbnz	r4, 8001978 <_malloc_r+0x88>
 8001926:	4629      	mov	r1, r5
 8001928:	4630      	mov	r0, r6
 800192a:	f7ff ffbf 	bl	80018ac <sbrk_aligned>
 800192e:	1c43      	adds	r3, r0, #1
 8001930:	4604      	mov	r4, r0
 8001932:	d158      	bne.n	80019e6 <_malloc_r+0xf6>
 8001934:	f8d8 4000 	ldr.w	r4, [r8]
 8001938:	4627      	mov	r7, r4
 800193a:	2f00      	cmp	r7, #0
 800193c:	d143      	bne.n	80019c6 <_malloc_r+0xd6>
 800193e:	2c00      	cmp	r4, #0
 8001940:	d04b      	beq.n	80019da <_malloc_r+0xea>
 8001942:	6823      	ldr	r3, [r4, #0]
 8001944:	4639      	mov	r1, r7
 8001946:	4630      	mov	r0, r6
 8001948:	eb04 0903 	add.w	r9, r4, r3
 800194c:	f000 fbc2 	bl	80020d4 <_sbrk_r>
 8001950:	4581      	cmp	r9, r0
 8001952:	d142      	bne.n	80019da <_malloc_r+0xea>
 8001954:	6821      	ldr	r1, [r4, #0]
 8001956:	4630      	mov	r0, r6
 8001958:	1a6d      	subs	r5, r5, r1
 800195a:	4629      	mov	r1, r5
 800195c:	f7ff ffa6 	bl	80018ac <sbrk_aligned>
 8001960:	3001      	adds	r0, #1
 8001962:	d03a      	beq.n	80019da <_malloc_r+0xea>
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	442b      	add	r3, r5
 8001968:	6023      	str	r3, [r4, #0]
 800196a:	f8d8 3000 	ldr.w	r3, [r8]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	bb62      	cbnz	r2, 80019cc <_malloc_r+0xdc>
 8001972:	f8c8 7000 	str.w	r7, [r8]
 8001976:	e00f      	b.n	8001998 <_malloc_r+0xa8>
 8001978:	6822      	ldr	r2, [r4, #0]
 800197a:	1b52      	subs	r2, r2, r5
 800197c:	d420      	bmi.n	80019c0 <_malloc_r+0xd0>
 800197e:	2a0b      	cmp	r2, #11
 8001980:	d917      	bls.n	80019b2 <_malloc_r+0xc2>
 8001982:	1961      	adds	r1, r4, r5
 8001984:	42a3      	cmp	r3, r4
 8001986:	6025      	str	r5, [r4, #0]
 8001988:	bf18      	it	ne
 800198a:	6059      	strne	r1, [r3, #4]
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	bf08      	it	eq
 8001990:	f8c8 1000 	streq.w	r1, [r8]
 8001994:	5162      	str	r2, [r4, r5]
 8001996:	604b      	str	r3, [r1, #4]
 8001998:	4630      	mov	r0, r6
 800199a:	f000 f82f 	bl	80019fc <__malloc_unlock>
 800199e:	f104 000b 	add.w	r0, r4, #11
 80019a2:	1d23      	adds	r3, r4, #4
 80019a4:	f020 0007 	bic.w	r0, r0, #7
 80019a8:	1ac2      	subs	r2, r0, r3
 80019aa:	bf1c      	itt	ne
 80019ac:	1a1b      	subne	r3, r3, r0
 80019ae:	50a3      	strne	r3, [r4, r2]
 80019b0:	e7af      	b.n	8001912 <_malloc_r+0x22>
 80019b2:	6862      	ldr	r2, [r4, #4]
 80019b4:	42a3      	cmp	r3, r4
 80019b6:	bf0c      	ite	eq
 80019b8:	f8c8 2000 	streq.w	r2, [r8]
 80019bc:	605a      	strne	r2, [r3, #4]
 80019be:	e7eb      	b.n	8001998 <_malloc_r+0xa8>
 80019c0:	4623      	mov	r3, r4
 80019c2:	6864      	ldr	r4, [r4, #4]
 80019c4:	e7ae      	b.n	8001924 <_malloc_r+0x34>
 80019c6:	463c      	mov	r4, r7
 80019c8:	687f      	ldr	r7, [r7, #4]
 80019ca:	e7b6      	b.n	800193a <_malloc_r+0x4a>
 80019cc:	461a      	mov	r2, r3
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	42a3      	cmp	r3, r4
 80019d2:	d1fb      	bne.n	80019cc <_malloc_r+0xdc>
 80019d4:	2300      	movs	r3, #0
 80019d6:	6053      	str	r3, [r2, #4]
 80019d8:	e7de      	b.n	8001998 <_malloc_r+0xa8>
 80019da:	230c      	movs	r3, #12
 80019dc:	4630      	mov	r0, r6
 80019de:	6033      	str	r3, [r6, #0]
 80019e0:	f000 f80c 	bl	80019fc <__malloc_unlock>
 80019e4:	e794      	b.n	8001910 <_malloc_r+0x20>
 80019e6:	6005      	str	r5, [r0, #0]
 80019e8:	e7d6      	b.n	8001998 <_malloc_r+0xa8>
 80019ea:	bf00      	nop
 80019ec:	200001d8 	.word	0x200001d8

080019f0 <__malloc_lock>:
 80019f0:	4801      	ldr	r0, [pc, #4]	@ (80019f8 <__malloc_lock+0x8>)
 80019f2:	f7ff bf10 	b.w	8001816 <__retarget_lock_acquire_recursive>
 80019f6:	bf00      	nop
 80019f8:	200001d0 	.word	0x200001d0

080019fc <__malloc_unlock>:
 80019fc:	4801      	ldr	r0, [pc, #4]	@ (8001a04 <__malloc_unlock+0x8>)
 80019fe:	f7ff bf0b 	b.w	8001818 <__retarget_lock_release_recursive>
 8001a02:	bf00      	nop
 8001a04:	200001d0 	.word	0x200001d0

08001a08 <__sfputc_r>:
 8001a08:	6893      	ldr	r3, [r2, #8]
 8001a0a:	b410      	push	{r4}
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	6093      	str	r3, [r2, #8]
 8001a12:	da07      	bge.n	8001a24 <__sfputc_r+0x1c>
 8001a14:	6994      	ldr	r4, [r2, #24]
 8001a16:	42a3      	cmp	r3, r4
 8001a18:	db01      	blt.n	8001a1e <__sfputc_r+0x16>
 8001a1a:	290a      	cmp	r1, #10
 8001a1c:	d102      	bne.n	8001a24 <__sfputc_r+0x1c>
 8001a1e:	bc10      	pop	{r4}
 8001a20:	f000 bac4 	b.w	8001fac <__swbuf_r>
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	1c58      	adds	r0, r3, #1
 8001a28:	6010      	str	r0, [r2, #0]
 8001a2a:	7019      	strb	r1, [r3, #0]
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	bc10      	pop	{r4}
 8001a30:	4770      	bx	lr

08001a32 <__sfputs_r>:
 8001a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a34:	4606      	mov	r6, r0
 8001a36:	460f      	mov	r7, r1
 8001a38:	4614      	mov	r4, r2
 8001a3a:	18d5      	adds	r5, r2, r3
 8001a3c:	42ac      	cmp	r4, r5
 8001a3e:	d101      	bne.n	8001a44 <__sfputs_r+0x12>
 8001a40:	2000      	movs	r0, #0
 8001a42:	e007      	b.n	8001a54 <__sfputs_r+0x22>
 8001a44:	463a      	mov	r2, r7
 8001a46:	4630      	mov	r0, r6
 8001a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a4c:	f7ff ffdc 	bl	8001a08 <__sfputc_r>
 8001a50:	1c43      	adds	r3, r0, #1
 8001a52:	d1f3      	bne.n	8001a3c <__sfputs_r+0xa>
 8001a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a58 <_vfiprintf_r>:
 8001a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	4614      	mov	r4, r2
 8001a60:	4698      	mov	r8, r3
 8001a62:	4606      	mov	r6, r0
 8001a64:	b09d      	sub	sp, #116	@ 0x74
 8001a66:	b118      	cbz	r0, 8001a70 <_vfiprintf_r+0x18>
 8001a68:	6a03      	ldr	r3, [r0, #32]
 8001a6a:	b90b      	cbnz	r3, 8001a70 <_vfiprintf_r+0x18>
 8001a6c:	f7ff fdce 	bl	800160c <__sinit>
 8001a70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a72:	07d9      	lsls	r1, r3, #31
 8001a74:	d405      	bmi.n	8001a82 <_vfiprintf_r+0x2a>
 8001a76:	89ab      	ldrh	r3, [r5, #12]
 8001a78:	059a      	lsls	r2, r3, #22
 8001a7a:	d402      	bmi.n	8001a82 <_vfiprintf_r+0x2a>
 8001a7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a7e:	f7ff feca 	bl	8001816 <__retarget_lock_acquire_recursive>
 8001a82:	89ab      	ldrh	r3, [r5, #12]
 8001a84:	071b      	lsls	r3, r3, #28
 8001a86:	d501      	bpl.n	8001a8c <_vfiprintf_r+0x34>
 8001a88:	692b      	ldr	r3, [r5, #16]
 8001a8a:	b99b      	cbnz	r3, 8001ab4 <_vfiprintf_r+0x5c>
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	4630      	mov	r0, r6
 8001a90:	f000 faca 	bl	8002028 <__swsetup_r>
 8001a94:	b170      	cbz	r0, 8001ab4 <_vfiprintf_r+0x5c>
 8001a96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a98:	07dc      	lsls	r4, r3, #31
 8001a9a:	d504      	bpl.n	8001aa6 <_vfiprintf_r+0x4e>
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aa0:	b01d      	add	sp, #116	@ 0x74
 8001aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aa6:	89ab      	ldrh	r3, [r5, #12]
 8001aa8:	0598      	lsls	r0, r3, #22
 8001aaa:	d4f7      	bmi.n	8001a9c <_vfiprintf_r+0x44>
 8001aac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001aae:	f7ff feb3 	bl	8001818 <__retarget_lock_release_recursive>
 8001ab2:	e7f3      	b.n	8001a9c <_vfiprintf_r+0x44>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ab8:	2320      	movs	r3, #32
 8001aba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001abe:	2330      	movs	r3, #48	@ 0x30
 8001ac0:	f04f 0901 	mov.w	r9, #1
 8001ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ac8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001c74 <_vfiprintf_r+0x21c>
 8001acc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	469a      	mov	sl, r3
 8001ad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ad8:	b10a      	cbz	r2, 8001ade <_vfiprintf_r+0x86>
 8001ada:	2a25      	cmp	r2, #37	@ 0x25
 8001adc:	d1f9      	bne.n	8001ad2 <_vfiprintf_r+0x7a>
 8001ade:	ebba 0b04 	subs.w	fp, sl, r4
 8001ae2:	d00b      	beq.n	8001afc <_vfiprintf_r+0xa4>
 8001ae4:	465b      	mov	r3, fp
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	4629      	mov	r1, r5
 8001aea:	4630      	mov	r0, r6
 8001aec:	f7ff ffa1 	bl	8001a32 <__sfputs_r>
 8001af0:	3001      	adds	r0, #1
 8001af2:	f000 80a7 	beq.w	8001c44 <_vfiprintf_r+0x1ec>
 8001af6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001af8:	445a      	add	r2, fp
 8001afa:	9209      	str	r2, [sp, #36]	@ 0x24
 8001afc:	f89a 3000 	ldrb.w	r3, [sl]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 809f 	beq.w	8001c44 <_vfiprintf_r+0x1ec>
 8001b06:	2300      	movs	r3, #0
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b10:	f10a 0a01 	add.w	sl, sl, #1
 8001b14:	9304      	str	r3, [sp, #16]
 8001b16:	9307      	str	r3, [sp, #28]
 8001b18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b1e:	4654      	mov	r4, sl
 8001b20:	2205      	movs	r2, #5
 8001b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b26:	4853      	ldr	r0, [pc, #332]	@ (8001c74 <_vfiprintf_r+0x21c>)
 8001b28:	f000 fae4 	bl	80020f4 <memchr>
 8001b2c:	9a04      	ldr	r2, [sp, #16]
 8001b2e:	b9d8      	cbnz	r0, 8001b68 <_vfiprintf_r+0x110>
 8001b30:	06d1      	lsls	r1, r2, #27
 8001b32:	bf44      	itt	mi
 8001b34:	2320      	movmi	r3, #32
 8001b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b3a:	0713      	lsls	r3, r2, #28
 8001b3c:	bf44      	itt	mi
 8001b3e:	232b      	movmi	r3, #43	@ 0x2b
 8001b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b44:	f89a 3000 	ldrb.w	r3, [sl]
 8001b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b4a:	d015      	beq.n	8001b78 <_vfiprintf_r+0x120>
 8001b4c:	4654      	mov	r4, sl
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f04f 0c0a 	mov.w	ip, #10
 8001b54:	9a07      	ldr	r2, [sp, #28]
 8001b56:	4621      	mov	r1, r4
 8001b58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b5c:	3b30      	subs	r3, #48	@ 0x30
 8001b5e:	2b09      	cmp	r3, #9
 8001b60:	d94b      	bls.n	8001bfa <_vfiprintf_r+0x1a2>
 8001b62:	b1b0      	cbz	r0, 8001b92 <_vfiprintf_r+0x13a>
 8001b64:	9207      	str	r2, [sp, #28]
 8001b66:	e014      	b.n	8001b92 <_vfiprintf_r+0x13a>
 8001b68:	eba0 0308 	sub.w	r3, r0, r8
 8001b6c:	fa09 f303 	lsl.w	r3, r9, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	46a2      	mov	sl, r4
 8001b74:	9304      	str	r3, [sp, #16]
 8001b76:	e7d2      	b.n	8001b1e <_vfiprintf_r+0xc6>
 8001b78:	9b03      	ldr	r3, [sp, #12]
 8001b7a:	1d19      	adds	r1, r3, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	9103      	str	r1, [sp, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bfbb      	ittet	lt
 8001b84:	425b      	neglt	r3, r3
 8001b86:	f042 0202 	orrlt.w	r2, r2, #2
 8001b8a:	9307      	strge	r3, [sp, #28]
 8001b8c:	9307      	strlt	r3, [sp, #28]
 8001b8e:	bfb8      	it	lt
 8001b90:	9204      	strlt	r2, [sp, #16]
 8001b92:	7823      	ldrb	r3, [r4, #0]
 8001b94:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b96:	d10a      	bne.n	8001bae <_vfiprintf_r+0x156>
 8001b98:	7863      	ldrb	r3, [r4, #1]
 8001b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b9c:	d132      	bne.n	8001c04 <_vfiprintf_r+0x1ac>
 8001b9e:	9b03      	ldr	r3, [sp, #12]
 8001ba0:	3402      	adds	r4, #2
 8001ba2:	1d1a      	adds	r2, r3, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	9203      	str	r2, [sp, #12]
 8001ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bac:	9305      	str	r3, [sp, #20]
 8001bae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001c78 <_vfiprintf_r+0x220>
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	4650      	mov	r0, sl
 8001bb6:	7821      	ldrb	r1, [r4, #0]
 8001bb8:	f000 fa9c 	bl	80020f4 <memchr>
 8001bbc:	b138      	cbz	r0, 8001bce <_vfiprintf_r+0x176>
 8001bbe:	2240      	movs	r2, #64	@ 0x40
 8001bc0:	9b04      	ldr	r3, [sp, #16]
 8001bc2:	eba0 000a 	sub.w	r0, r0, sl
 8001bc6:	4082      	lsls	r2, r0
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	3401      	adds	r4, #1
 8001bcc:	9304      	str	r3, [sp, #16]
 8001bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd2:	2206      	movs	r2, #6
 8001bd4:	4829      	ldr	r0, [pc, #164]	@ (8001c7c <_vfiprintf_r+0x224>)
 8001bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001bda:	f000 fa8b 	bl	80020f4 <memchr>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d03f      	beq.n	8001c62 <_vfiprintf_r+0x20a>
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <_vfiprintf_r+0x228>)
 8001be4:	bb1b      	cbnz	r3, 8001c2e <_vfiprintf_r+0x1d6>
 8001be6:	9b03      	ldr	r3, [sp, #12]
 8001be8:	3307      	adds	r3, #7
 8001bea:	f023 0307 	bic.w	r3, r3, #7
 8001bee:	3308      	adds	r3, #8
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bf4:	443b      	add	r3, r7
 8001bf6:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bf8:	e76a      	b.n	8001ad0 <_vfiprintf_r+0x78>
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c02:	e7a8      	b.n	8001b56 <_vfiprintf_r+0xfe>
 8001c04:	2300      	movs	r3, #0
 8001c06:	f04f 0c0a 	mov.w	ip, #10
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	3401      	adds	r4, #1
 8001c0e:	9305      	str	r3, [sp, #20]
 8001c10:	4620      	mov	r0, r4
 8001c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c16:	3a30      	subs	r2, #48	@ 0x30
 8001c18:	2a09      	cmp	r2, #9
 8001c1a:	d903      	bls.n	8001c24 <_vfiprintf_r+0x1cc>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0c6      	beq.n	8001bae <_vfiprintf_r+0x156>
 8001c20:	9105      	str	r1, [sp, #20]
 8001c22:	e7c4      	b.n	8001bae <_vfiprintf_r+0x156>
 8001c24:	4604      	mov	r4, r0
 8001c26:	2301      	movs	r3, #1
 8001c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c2c:	e7f0      	b.n	8001c10 <_vfiprintf_r+0x1b8>
 8001c2e:	ab03      	add	r3, sp, #12
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	462a      	mov	r2, r5
 8001c34:	4630      	mov	r0, r6
 8001c36:	4b13      	ldr	r3, [pc, #76]	@ (8001c84 <_vfiprintf_r+0x22c>)
 8001c38:	a904      	add	r1, sp, #16
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4607      	mov	r7, r0
 8001c40:	1c78      	adds	r0, r7, #1
 8001c42:	d1d6      	bne.n	8001bf2 <_vfiprintf_r+0x19a>
 8001c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c46:	07d9      	lsls	r1, r3, #31
 8001c48:	d405      	bmi.n	8001c56 <_vfiprintf_r+0x1fe>
 8001c4a:	89ab      	ldrh	r3, [r5, #12]
 8001c4c:	059a      	lsls	r2, r3, #22
 8001c4e:	d402      	bmi.n	8001c56 <_vfiprintf_r+0x1fe>
 8001c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c52:	f7ff fde1 	bl	8001818 <__retarget_lock_release_recursive>
 8001c56:	89ab      	ldrh	r3, [r5, #12]
 8001c58:	065b      	lsls	r3, r3, #25
 8001c5a:	f53f af1f 	bmi.w	8001a9c <_vfiprintf_r+0x44>
 8001c5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c60:	e71e      	b.n	8001aa0 <_vfiprintf_r+0x48>
 8001c62:	ab03      	add	r3, sp, #12
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	462a      	mov	r2, r5
 8001c68:	4630      	mov	r0, r6
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <_vfiprintf_r+0x22c>)
 8001c6c:	a904      	add	r1, sp, #16
 8001c6e:	f000 f87d 	bl	8001d6c <_printf_i>
 8001c72:	e7e4      	b.n	8001c3e <_vfiprintf_r+0x1e6>
 8001c74:	08002272 	.word	0x08002272
 8001c78:	08002278 	.word	0x08002278
 8001c7c:	0800227c 	.word	0x0800227c
 8001c80:	00000000 	.word	0x00000000
 8001c84:	08001a33 	.word	0x08001a33

08001c88 <_printf_common>:
 8001c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c8c:	4616      	mov	r6, r2
 8001c8e:	4698      	mov	r8, r3
 8001c90:	688a      	ldr	r2, [r1, #8]
 8001c92:	690b      	ldr	r3, [r1, #16]
 8001c94:	4607      	mov	r7, r0
 8001c96:	4293      	cmp	r3, r2
 8001c98:	bfb8      	it	lt
 8001c9a:	4613      	movlt	r3, r2
 8001c9c:	6033      	str	r3, [r6, #0]
 8001c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ca8:	b10a      	cbz	r2, 8001cae <_printf_common+0x26>
 8001caa:	3301      	adds	r3, #1
 8001cac:	6033      	str	r3, [r6, #0]
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	0699      	lsls	r1, r3, #26
 8001cb2:	bf42      	ittt	mi
 8001cb4:	6833      	ldrmi	r3, [r6, #0]
 8001cb6:	3302      	addmi	r3, #2
 8001cb8:	6033      	strmi	r3, [r6, #0]
 8001cba:	6825      	ldr	r5, [r4, #0]
 8001cbc:	f015 0506 	ands.w	r5, r5, #6
 8001cc0:	d106      	bne.n	8001cd0 <_printf_common+0x48>
 8001cc2:	f104 0a19 	add.w	sl, r4, #25
 8001cc6:	68e3      	ldr	r3, [r4, #12]
 8001cc8:	6832      	ldr	r2, [r6, #0]
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	42ab      	cmp	r3, r5
 8001cce:	dc2b      	bgt.n	8001d28 <_printf_common+0xa0>
 8001cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001cd4:	6822      	ldr	r2, [r4, #0]
 8001cd6:	3b00      	subs	r3, #0
 8001cd8:	bf18      	it	ne
 8001cda:	2301      	movne	r3, #1
 8001cdc:	0692      	lsls	r2, r2, #26
 8001cde:	d430      	bmi.n	8001d42 <_printf_common+0xba>
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001ce8:	47c8      	blx	r9
 8001cea:	3001      	adds	r0, #1
 8001cec:	d023      	beq.n	8001d36 <_printf_common+0xae>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	6922      	ldr	r2, [r4, #16]
 8001cf2:	f003 0306 	and.w	r3, r3, #6
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	bf14      	ite	ne
 8001cfa:	2500      	movne	r5, #0
 8001cfc:	6833      	ldreq	r3, [r6, #0]
 8001cfe:	f04f 0600 	mov.w	r6, #0
 8001d02:	bf08      	it	eq
 8001d04:	68e5      	ldreq	r5, [r4, #12]
 8001d06:	f104 041a 	add.w	r4, r4, #26
 8001d0a:	bf08      	it	eq
 8001d0c:	1aed      	subeq	r5, r5, r3
 8001d0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001d12:	bf08      	it	eq
 8001d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	bfc4      	itt	gt
 8001d1c:	1a9b      	subgt	r3, r3, r2
 8001d1e:	18ed      	addgt	r5, r5, r3
 8001d20:	42b5      	cmp	r5, r6
 8001d22:	d11a      	bne.n	8001d5a <_printf_common+0xd2>
 8001d24:	2000      	movs	r0, #0
 8001d26:	e008      	b.n	8001d3a <_printf_common+0xb2>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	4652      	mov	r2, sl
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	4638      	mov	r0, r7
 8001d30:	47c8      	blx	r9
 8001d32:	3001      	adds	r0, #1
 8001d34:	d103      	bne.n	8001d3e <_printf_common+0xb6>
 8001d36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d3e:	3501      	adds	r5, #1
 8001d40:	e7c1      	b.n	8001cc6 <_printf_common+0x3e>
 8001d42:	2030      	movs	r0, #48	@ 0x30
 8001d44:	18e1      	adds	r1, r4, r3
 8001d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d50:	4422      	add	r2, r4
 8001d52:	3302      	adds	r3, #2
 8001d54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d58:	e7c2      	b.n	8001ce0 <_printf_common+0x58>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	4641      	mov	r1, r8
 8001d60:	4638      	mov	r0, r7
 8001d62:	47c8      	blx	r9
 8001d64:	3001      	adds	r0, #1
 8001d66:	d0e6      	beq.n	8001d36 <_printf_common+0xae>
 8001d68:	3601      	adds	r6, #1
 8001d6a:	e7d9      	b.n	8001d20 <_printf_common+0x98>

08001d6c <_printf_i>:
 8001d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d70:	7e0f      	ldrb	r7, [r1, #24]
 8001d72:	4691      	mov	r9, r2
 8001d74:	2f78      	cmp	r7, #120	@ 0x78
 8001d76:	4680      	mov	r8, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	469a      	mov	sl, r3
 8001d7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d82:	d807      	bhi.n	8001d94 <_printf_i+0x28>
 8001d84:	2f62      	cmp	r7, #98	@ 0x62
 8001d86:	d80a      	bhi.n	8001d9e <_printf_i+0x32>
 8001d88:	2f00      	cmp	r7, #0
 8001d8a:	f000 80d3 	beq.w	8001f34 <_printf_i+0x1c8>
 8001d8e:	2f58      	cmp	r7, #88	@ 0x58
 8001d90:	f000 80ba 	beq.w	8001f08 <_printf_i+0x19c>
 8001d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d9c:	e03a      	b.n	8001e14 <_printf_i+0xa8>
 8001d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001da2:	2b15      	cmp	r3, #21
 8001da4:	d8f6      	bhi.n	8001d94 <_printf_i+0x28>
 8001da6:	a101      	add	r1, pc, #4	@ (adr r1, 8001dac <_printf_i+0x40>)
 8001da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dac:	08001e05 	.word	0x08001e05
 8001db0:	08001e19 	.word	0x08001e19
 8001db4:	08001d95 	.word	0x08001d95
 8001db8:	08001d95 	.word	0x08001d95
 8001dbc:	08001d95 	.word	0x08001d95
 8001dc0:	08001d95 	.word	0x08001d95
 8001dc4:	08001e19 	.word	0x08001e19
 8001dc8:	08001d95 	.word	0x08001d95
 8001dcc:	08001d95 	.word	0x08001d95
 8001dd0:	08001d95 	.word	0x08001d95
 8001dd4:	08001d95 	.word	0x08001d95
 8001dd8:	08001f1b 	.word	0x08001f1b
 8001ddc:	08001e43 	.word	0x08001e43
 8001de0:	08001ed5 	.word	0x08001ed5
 8001de4:	08001d95 	.word	0x08001d95
 8001de8:	08001d95 	.word	0x08001d95
 8001dec:	08001f3d 	.word	0x08001f3d
 8001df0:	08001d95 	.word	0x08001d95
 8001df4:	08001e43 	.word	0x08001e43
 8001df8:	08001d95 	.word	0x08001d95
 8001dfc:	08001d95 	.word	0x08001d95
 8001e00:	08001edd 	.word	0x08001edd
 8001e04:	6833      	ldr	r3, [r6, #0]
 8001e06:	1d1a      	adds	r2, r3, #4
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6032      	str	r2, [r6, #0]
 8001e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e14:	2301      	movs	r3, #1
 8001e16:	e09e      	b.n	8001f56 <_printf_i+0x1ea>
 8001e18:	6833      	ldr	r3, [r6, #0]
 8001e1a:	6820      	ldr	r0, [r4, #0]
 8001e1c:	1d19      	adds	r1, r3, #4
 8001e1e:	6031      	str	r1, [r6, #0]
 8001e20:	0606      	lsls	r6, r0, #24
 8001e22:	d501      	bpl.n	8001e28 <_printf_i+0xbc>
 8001e24:	681d      	ldr	r5, [r3, #0]
 8001e26:	e003      	b.n	8001e30 <_printf_i+0xc4>
 8001e28:	0645      	lsls	r5, r0, #25
 8001e2a:	d5fb      	bpl.n	8001e24 <_printf_i+0xb8>
 8001e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e30:	2d00      	cmp	r5, #0
 8001e32:	da03      	bge.n	8001e3c <_printf_i+0xd0>
 8001e34:	232d      	movs	r3, #45	@ 0x2d
 8001e36:	426d      	negs	r5, r5
 8001e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e3c:	230a      	movs	r3, #10
 8001e3e:	4859      	ldr	r0, [pc, #356]	@ (8001fa4 <_printf_i+0x238>)
 8001e40:	e011      	b.n	8001e66 <_printf_i+0xfa>
 8001e42:	6821      	ldr	r1, [r4, #0]
 8001e44:	6833      	ldr	r3, [r6, #0]
 8001e46:	0608      	lsls	r0, r1, #24
 8001e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e4c:	d402      	bmi.n	8001e54 <_printf_i+0xe8>
 8001e4e:	0649      	lsls	r1, r1, #25
 8001e50:	bf48      	it	mi
 8001e52:	b2ad      	uxthmi	r5, r5
 8001e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e56:	6033      	str	r3, [r6, #0]
 8001e58:	bf14      	ite	ne
 8001e5a:	230a      	movne	r3, #10
 8001e5c:	2308      	moveq	r3, #8
 8001e5e:	4851      	ldr	r0, [pc, #324]	@ (8001fa4 <_printf_i+0x238>)
 8001e60:	2100      	movs	r1, #0
 8001e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e66:	6866      	ldr	r6, [r4, #4]
 8001e68:	2e00      	cmp	r6, #0
 8001e6a:	bfa8      	it	ge
 8001e6c:	6821      	ldrge	r1, [r4, #0]
 8001e6e:	60a6      	str	r6, [r4, #8]
 8001e70:	bfa4      	itt	ge
 8001e72:	f021 0104 	bicge.w	r1, r1, #4
 8001e76:	6021      	strge	r1, [r4, #0]
 8001e78:	b90d      	cbnz	r5, 8001e7e <_printf_i+0x112>
 8001e7a:	2e00      	cmp	r6, #0
 8001e7c:	d04b      	beq.n	8001f16 <_printf_i+0x1aa>
 8001e7e:	4616      	mov	r6, r2
 8001e80:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e84:	fb03 5711 	mls	r7, r3, r1, r5
 8001e88:	5dc7      	ldrb	r7, [r0, r7]
 8001e8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e8e:	462f      	mov	r7, r5
 8001e90:	42bb      	cmp	r3, r7
 8001e92:	460d      	mov	r5, r1
 8001e94:	d9f4      	bls.n	8001e80 <_printf_i+0x114>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d10b      	bne.n	8001eb2 <_printf_i+0x146>
 8001e9a:	6823      	ldr	r3, [r4, #0]
 8001e9c:	07df      	lsls	r7, r3, #31
 8001e9e:	d508      	bpl.n	8001eb2 <_printf_i+0x146>
 8001ea0:	6923      	ldr	r3, [r4, #16]
 8001ea2:	6861      	ldr	r1, [r4, #4]
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	bfde      	ittt	le
 8001ea8:	2330      	movle	r3, #48	@ 0x30
 8001eaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001eae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001eb2:	1b92      	subs	r2, r2, r6
 8001eb4:	6122      	str	r2, [r4, #16]
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	4621      	mov	r1, r4
 8001eba:	4640      	mov	r0, r8
 8001ebc:	f8cd a000 	str.w	sl, [sp]
 8001ec0:	aa03      	add	r2, sp, #12
 8001ec2:	f7ff fee1 	bl	8001c88 <_printf_common>
 8001ec6:	3001      	adds	r0, #1
 8001ec8:	d14a      	bne.n	8001f60 <_printf_i+0x1f4>
 8001eca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ece:	b004      	add	sp, #16
 8001ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f043 0320 	orr.w	r3, r3, #32
 8001eda:	6023      	str	r3, [r4, #0]
 8001edc:	2778      	movs	r7, #120	@ 0x78
 8001ede:	4832      	ldr	r0, [pc, #200]	@ (8001fa8 <_printf_i+0x23c>)
 8001ee0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	6831      	ldr	r1, [r6, #0]
 8001ee8:	061f      	lsls	r7, r3, #24
 8001eea:	f851 5b04 	ldr.w	r5, [r1], #4
 8001eee:	d402      	bmi.n	8001ef6 <_printf_i+0x18a>
 8001ef0:	065f      	lsls	r7, r3, #25
 8001ef2:	bf48      	it	mi
 8001ef4:	b2ad      	uxthmi	r5, r5
 8001ef6:	6031      	str	r1, [r6, #0]
 8001ef8:	07d9      	lsls	r1, r3, #31
 8001efa:	bf44      	itt	mi
 8001efc:	f043 0320 	orrmi.w	r3, r3, #32
 8001f00:	6023      	strmi	r3, [r4, #0]
 8001f02:	b11d      	cbz	r5, 8001f0c <_printf_i+0x1a0>
 8001f04:	2310      	movs	r3, #16
 8001f06:	e7ab      	b.n	8001e60 <_printf_i+0xf4>
 8001f08:	4826      	ldr	r0, [pc, #152]	@ (8001fa4 <_printf_i+0x238>)
 8001f0a:	e7e9      	b.n	8001ee0 <_printf_i+0x174>
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	f023 0320 	bic.w	r3, r3, #32
 8001f12:	6023      	str	r3, [r4, #0]
 8001f14:	e7f6      	b.n	8001f04 <_printf_i+0x198>
 8001f16:	4616      	mov	r6, r2
 8001f18:	e7bd      	b.n	8001e96 <_printf_i+0x12a>
 8001f1a:	6833      	ldr	r3, [r6, #0]
 8001f1c:	6825      	ldr	r5, [r4, #0]
 8001f1e:	1d18      	adds	r0, r3, #4
 8001f20:	6961      	ldr	r1, [r4, #20]
 8001f22:	6030      	str	r0, [r6, #0]
 8001f24:	062e      	lsls	r6, r5, #24
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	d501      	bpl.n	8001f2e <_printf_i+0x1c2>
 8001f2a:	6019      	str	r1, [r3, #0]
 8001f2c:	e002      	b.n	8001f34 <_printf_i+0x1c8>
 8001f2e:	0668      	lsls	r0, r5, #25
 8001f30:	d5fb      	bpl.n	8001f2a <_printf_i+0x1be>
 8001f32:	8019      	strh	r1, [r3, #0]
 8001f34:	2300      	movs	r3, #0
 8001f36:	4616      	mov	r6, r2
 8001f38:	6123      	str	r3, [r4, #16]
 8001f3a:	e7bc      	b.n	8001eb6 <_printf_i+0x14a>
 8001f3c:	6833      	ldr	r3, [r6, #0]
 8001f3e:	2100      	movs	r1, #0
 8001f40:	1d1a      	adds	r2, r3, #4
 8001f42:	6032      	str	r2, [r6, #0]
 8001f44:	681e      	ldr	r6, [r3, #0]
 8001f46:	6862      	ldr	r2, [r4, #4]
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f000 f8d3 	bl	80020f4 <memchr>
 8001f4e:	b108      	cbz	r0, 8001f54 <_printf_i+0x1e8>
 8001f50:	1b80      	subs	r0, r0, r6
 8001f52:	6060      	str	r0, [r4, #4]
 8001f54:	6863      	ldr	r3, [r4, #4]
 8001f56:	6123      	str	r3, [r4, #16]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f5e:	e7aa      	b.n	8001eb6 <_printf_i+0x14a>
 8001f60:	4632      	mov	r2, r6
 8001f62:	4649      	mov	r1, r9
 8001f64:	4640      	mov	r0, r8
 8001f66:	6923      	ldr	r3, [r4, #16]
 8001f68:	47d0      	blx	sl
 8001f6a:	3001      	adds	r0, #1
 8001f6c:	d0ad      	beq.n	8001eca <_printf_i+0x15e>
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	079b      	lsls	r3, r3, #30
 8001f72:	d413      	bmi.n	8001f9c <_printf_i+0x230>
 8001f74:	68e0      	ldr	r0, [r4, #12]
 8001f76:	9b03      	ldr	r3, [sp, #12]
 8001f78:	4298      	cmp	r0, r3
 8001f7a:	bfb8      	it	lt
 8001f7c:	4618      	movlt	r0, r3
 8001f7e:	e7a6      	b.n	8001ece <_printf_i+0x162>
 8001f80:	2301      	movs	r3, #1
 8001f82:	4632      	mov	r2, r6
 8001f84:	4649      	mov	r1, r9
 8001f86:	4640      	mov	r0, r8
 8001f88:	47d0      	blx	sl
 8001f8a:	3001      	adds	r0, #1
 8001f8c:	d09d      	beq.n	8001eca <_printf_i+0x15e>
 8001f8e:	3501      	adds	r5, #1
 8001f90:	68e3      	ldr	r3, [r4, #12]
 8001f92:	9903      	ldr	r1, [sp, #12]
 8001f94:	1a5b      	subs	r3, r3, r1
 8001f96:	42ab      	cmp	r3, r5
 8001f98:	dcf2      	bgt.n	8001f80 <_printf_i+0x214>
 8001f9a:	e7eb      	b.n	8001f74 <_printf_i+0x208>
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	f104 0619 	add.w	r6, r4, #25
 8001fa2:	e7f5      	b.n	8001f90 <_printf_i+0x224>
 8001fa4:	08002283 	.word	0x08002283
 8001fa8:	08002294 	.word	0x08002294

08001fac <__swbuf_r>:
 8001fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fae:	460e      	mov	r6, r1
 8001fb0:	4614      	mov	r4, r2
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	b118      	cbz	r0, 8001fbe <__swbuf_r+0x12>
 8001fb6:	6a03      	ldr	r3, [r0, #32]
 8001fb8:	b90b      	cbnz	r3, 8001fbe <__swbuf_r+0x12>
 8001fba:	f7ff fb27 	bl	800160c <__sinit>
 8001fbe:	69a3      	ldr	r3, [r4, #24]
 8001fc0:	60a3      	str	r3, [r4, #8]
 8001fc2:	89a3      	ldrh	r3, [r4, #12]
 8001fc4:	071a      	lsls	r2, r3, #28
 8001fc6:	d501      	bpl.n	8001fcc <__swbuf_r+0x20>
 8001fc8:	6923      	ldr	r3, [r4, #16]
 8001fca:	b943      	cbnz	r3, 8001fde <__swbuf_r+0x32>
 8001fcc:	4621      	mov	r1, r4
 8001fce:	4628      	mov	r0, r5
 8001fd0:	f000 f82a 	bl	8002028 <__swsetup_r>
 8001fd4:	b118      	cbz	r0, 8001fde <__swbuf_r+0x32>
 8001fd6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001fda:	4638      	mov	r0, r7
 8001fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	6922      	ldr	r2, [r4, #16]
 8001fe2:	b2f6      	uxtb	r6, r6
 8001fe4:	1a98      	subs	r0, r3, r2
 8001fe6:	6963      	ldr	r3, [r4, #20]
 8001fe8:	4637      	mov	r7, r6
 8001fea:	4283      	cmp	r3, r0
 8001fec:	dc05      	bgt.n	8001ffa <__swbuf_r+0x4e>
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f7ff fa43 	bl	800147c <_fflush_r>
 8001ff6:	2800      	cmp	r0, #0
 8001ff8:	d1ed      	bne.n	8001fd6 <__swbuf_r+0x2a>
 8001ffa:	68a3      	ldr	r3, [r4, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60a3      	str	r3, [r4, #8]
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	6022      	str	r2, [r4, #0]
 8002006:	701e      	strb	r6, [r3, #0]
 8002008:	6962      	ldr	r2, [r4, #20]
 800200a:	1c43      	adds	r3, r0, #1
 800200c:	429a      	cmp	r2, r3
 800200e:	d004      	beq.n	800201a <__swbuf_r+0x6e>
 8002010:	89a3      	ldrh	r3, [r4, #12]
 8002012:	07db      	lsls	r3, r3, #31
 8002014:	d5e1      	bpl.n	8001fda <__swbuf_r+0x2e>
 8002016:	2e0a      	cmp	r6, #10
 8002018:	d1df      	bne.n	8001fda <__swbuf_r+0x2e>
 800201a:	4621      	mov	r1, r4
 800201c:	4628      	mov	r0, r5
 800201e:	f7ff fa2d 	bl	800147c <_fflush_r>
 8002022:	2800      	cmp	r0, #0
 8002024:	d0d9      	beq.n	8001fda <__swbuf_r+0x2e>
 8002026:	e7d6      	b.n	8001fd6 <__swbuf_r+0x2a>

08002028 <__swsetup_r>:
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4b29      	ldr	r3, [pc, #164]	@ (80020d0 <__swsetup_r+0xa8>)
 800202c:	4605      	mov	r5, r0
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	460c      	mov	r4, r1
 8002032:	b118      	cbz	r0, 800203c <__swsetup_r+0x14>
 8002034:	6a03      	ldr	r3, [r0, #32]
 8002036:	b90b      	cbnz	r3, 800203c <__swsetup_r+0x14>
 8002038:	f7ff fae8 	bl	800160c <__sinit>
 800203c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002040:	0719      	lsls	r1, r3, #28
 8002042:	d422      	bmi.n	800208a <__swsetup_r+0x62>
 8002044:	06da      	lsls	r2, r3, #27
 8002046:	d407      	bmi.n	8002058 <__swsetup_r+0x30>
 8002048:	2209      	movs	r2, #9
 800204a:	602a      	str	r2, [r5, #0]
 800204c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002050:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002054:	81a3      	strh	r3, [r4, #12]
 8002056:	e033      	b.n	80020c0 <__swsetup_r+0x98>
 8002058:	0758      	lsls	r0, r3, #29
 800205a:	d512      	bpl.n	8002082 <__swsetup_r+0x5a>
 800205c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800205e:	b141      	cbz	r1, 8002072 <__swsetup_r+0x4a>
 8002060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002064:	4299      	cmp	r1, r3
 8002066:	d002      	beq.n	800206e <__swsetup_r+0x46>
 8002068:	4628      	mov	r0, r5
 800206a:	f7ff fbd7 	bl	800181c <_free_r>
 800206e:	2300      	movs	r3, #0
 8002070:	6363      	str	r3, [r4, #52]	@ 0x34
 8002072:	89a3      	ldrh	r3, [r4, #12]
 8002074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002078:	81a3      	strh	r3, [r4, #12]
 800207a:	2300      	movs	r3, #0
 800207c:	6063      	str	r3, [r4, #4]
 800207e:	6923      	ldr	r3, [r4, #16]
 8002080:	6023      	str	r3, [r4, #0]
 8002082:	89a3      	ldrh	r3, [r4, #12]
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	81a3      	strh	r3, [r4, #12]
 800208a:	6923      	ldr	r3, [r4, #16]
 800208c:	b94b      	cbnz	r3, 80020a2 <__swsetup_r+0x7a>
 800208e:	89a3      	ldrh	r3, [r4, #12]
 8002090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002098:	d003      	beq.n	80020a2 <__swsetup_r+0x7a>
 800209a:	4621      	mov	r1, r4
 800209c:	4628      	mov	r0, r5
 800209e:	f000 f85c 	bl	800215a <__smakebuf_r>
 80020a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020a6:	f013 0201 	ands.w	r2, r3, #1
 80020aa:	d00a      	beq.n	80020c2 <__swsetup_r+0x9a>
 80020ac:	2200      	movs	r2, #0
 80020ae:	60a2      	str	r2, [r4, #8]
 80020b0:	6962      	ldr	r2, [r4, #20]
 80020b2:	4252      	negs	r2, r2
 80020b4:	61a2      	str	r2, [r4, #24]
 80020b6:	6922      	ldr	r2, [r4, #16]
 80020b8:	b942      	cbnz	r2, 80020cc <__swsetup_r+0xa4>
 80020ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80020be:	d1c5      	bne.n	800204c <__swsetup_r+0x24>
 80020c0:	bd38      	pop	{r3, r4, r5, pc}
 80020c2:	0799      	lsls	r1, r3, #30
 80020c4:	bf58      	it	pl
 80020c6:	6962      	ldrpl	r2, [r4, #20]
 80020c8:	60a2      	str	r2, [r4, #8]
 80020ca:	e7f4      	b.n	80020b6 <__swsetup_r+0x8e>
 80020cc:	2000      	movs	r0, #0
 80020ce:	e7f7      	b.n	80020c0 <__swsetup_r+0x98>
 80020d0:	20000018 	.word	0x20000018

080020d4 <_sbrk_r>:
 80020d4:	b538      	push	{r3, r4, r5, lr}
 80020d6:	2300      	movs	r3, #0
 80020d8:	4d05      	ldr	r5, [pc, #20]	@ (80020f0 <_sbrk_r+0x1c>)
 80020da:	4604      	mov	r4, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	602b      	str	r3, [r5, #0]
 80020e0:	f7fe f9ec 	bl	80004bc <_sbrk>
 80020e4:	1c43      	adds	r3, r0, #1
 80020e6:	d102      	bne.n	80020ee <_sbrk_r+0x1a>
 80020e8:	682b      	ldr	r3, [r5, #0]
 80020ea:	b103      	cbz	r3, 80020ee <_sbrk_r+0x1a>
 80020ec:	6023      	str	r3, [r4, #0]
 80020ee:	bd38      	pop	{r3, r4, r5, pc}
 80020f0:	200001cc 	.word	0x200001cc

080020f4 <memchr>:
 80020f4:	4603      	mov	r3, r0
 80020f6:	b510      	push	{r4, lr}
 80020f8:	b2c9      	uxtb	r1, r1
 80020fa:	4402      	add	r2, r0
 80020fc:	4293      	cmp	r3, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	d101      	bne.n	8002106 <memchr+0x12>
 8002102:	2000      	movs	r0, #0
 8002104:	e003      	b.n	800210e <memchr+0x1a>
 8002106:	7804      	ldrb	r4, [r0, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	428c      	cmp	r4, r1
 800210c:	d1f6      	bne.n	80020fc <memchr+0x8>
 800210e:	bd10      	pop	{r4, pc}

08002110 <__swhatbuf_r>:
 8002110:	b570      	push	{r4, r5, r6, lr}
 8002112:	460c      	mov	r4, r1
 8002114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002118:	4615      	mov	r5, r2
 800211a:	2900      	cmp	r1, #0
 800211c:	461e      	mov	r6, r3
 800211e:	b096      	sub	sp, #88	@ 0x58
 8002120:	da0c      	bge.n	800213c <__swhatbuf_r+0x2c>
 8002122:	89a3      	ldrh	r3, [r4, #12]
 8002124:	2100      	movs	r1, #0
 8002126:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800212a:	bf14      	ite	ne
 800212c:	2340      	movne	r3, #64	@ 0x40
 800212e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002132:	2000      	movs	r0, #0
 8002134:	6031      	str	r1, [r6, #0]
 8002136:	602b      	str	r3, [r5, #0]
 8002138:	b016      	add	sp, #88	@ 0x58
 800213a:	bd70      	pop	{r4, r5, r6, pc}
 800213c:	466a      	mov	r2, sp
 800213e:	f000 f849 	bl	80021d4 <_fstat_r>
 8002142:	2800      	cmp	r0, #0
 8002144:	dbed      	blt.n	8002122 <__swhatbuf_r+0x12>
 8002146:	9901      	ldr	r1, [sp, #4]
 8002148:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800214c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002150:	4259      	negs	r1, r3
 8002152:	4159      	adcs	r1, r3
 8002154:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002158:	e7eb      	b.n	8002132 <__swhatbuf_r+0x22>

0800215a <__smakebuf_r>:
 800215a:	898b      	ldrh	r3, [r1, #12]
 800215c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800215e:	079d      	lsls	r5, r3, #30
 8002160:	4606      	mov	r6, r0
 8002162:	460c      	mov	r4, r1
 8002164:	d507      	bpl.n	8002176 <__smakebuf_r+0x1c>
 8002166:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800216a:	6023      	str	r3, [r4, #0]
 800216c:	6123      	str	r3, [r4, #16]
 800216e:	2301      	movs	r3, #1
 8002170:	6163      	str	r3, [r4, #20]
 8002172:	b003      	add	sp, #12
 8002174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002176:	466a      	mov	r2, sp
 8002178:	ab01      	add	r3, sp, #4
 800217a:	f7ff ffc9 	bl	8002110 <__swhatbuf_r>
 800217e:	9f00      	ldr	r7, [sp, #0]
 8002180:	4605      	mov	r5, r0
 8002182:	4639      	mov	r1, r7
 8002184:	4630      	mov	r0, r6
 8002186:	f7ff fbb3 	bl	80018f0 <_malloc_r>
 800218a:	b948      	cbnz	r0, 80021a0 <__smakebuf_r+0x46>
 800218c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002190:	059a      	lsls	r2, r3, #22
 8002192:	d4ee      	bmi.n	8002172 <__smakebuf_r+0x18>
 8002194:	f023 0303 	bic.w	r3, r3, #3
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	81a3      	strh	r3, [r4, #12]
 800219e:	e7e2      	b.n	8002166 <__smakebuf_r+0xc>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80021a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021aa:	81a3      	strh	r3, [r4, #12]
 80021ac:	9b01      	ldr	r3, [sp, #4]
 80021ae:	6020      	str	r0, [r4, #0]
 80021b0:	b15b      	cbz	r3, 80021ca <__smakebuf_r+0x70>
 80021b2:	4630      	mov	r0, r6
 80021b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021b8:	f000 f81e 	bl	80021f8 <_isatty_r>
 80021bc:	b128      	cbz	r0, 80021ca <__smakebuf_r+0x70>
 80021be:	89a3      	ldrh	r3, [r4, #12]
 80021c0:	f023 0303 	bic.w	r3, r3, #3
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	81a3      	strh	r3, [r4, #12]
 80021ca:	89a3      	ldrh	r3, [r4, #12]
 80021cc:	431d      	orrs	r5, r3
 80021ce:	81a5      	strh	r5, [r4, #12]
 80021d0:	e7cf      	b.n	8002172 <__smakebuf_r+0x18>
	...

080021d4 <_fstat_r>:
 80021d4:	b538      	push	{r3, r4, r5, lr}
 80021d6:	2300      	movs	r3, #0
 80021d8:	4d06      	ldr	r5, [pc, #24]	@ (80021f4 <_fstat_r+0x20>)
 80021da:	4604      	mov	r4, r0
 80021dc:	4608      	mov	r0, r1
 80021de:	4611      	mov	r1, r2
 80021e0:	602b      	str	r3, [r5, #0]
 80021e2:	f7fe f945 	bl	8000470 <_fstat>
 80021e6:	1c43      	adds	r3, r0, #1
 80021e8:	d102      	bne.n	80021f0 <_fstat_r+0x1c>
 80021ea:	682b      	ldr	r3, [r5, #0]
 80021ec:	b103      	cbz	r3, 80021f0 <_fstat_r+0x1c>
 80021ee:	6023      	str	r3, [r4, #0]
 80021f0:	bd38      	pop	{r3, r4, r5, pc}
 80021f2:	bf00      	nop
 80021f4:	200001cc 	.word	0x200001cc

080021f8 <_isatty_r>:
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	2300      	movs	r3, #0
 80021fc:	4d05      	ldr	r5, [pc, #20]	@ (8002214 <_isatty_r+0x1c>)
 80021fe:	4604      	mov	r4, r0
 8002200:	4608      	mov	r0, r1
 8002202:	602b      	str	r3, [r5, #0]
 8002204:	f7fe f943 	bl	800048e <_isatty>
 8002208:	1c43      	adds	r3, r0, #1
 800220a:	d102      	bne.n	8002212 <_isatty_r+0x1a>
 800220c:	682b      	ldr	r3, [r5, #0]
 800220e:	b103      	cbz	r3, 8002212 <_isatty_r+0x1a>
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	bd38      	pop	{r3, r4, r5, pc}
 8002214:	200001cc 	.word	0x200001cc

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	bf00      	nop
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr
