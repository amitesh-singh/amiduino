#define __ESP8266_EX__

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735_ESP.h> // Hardware-specific library
#include <SPI.h>


// For the breakout, you can use any 2 or 3 pins
// These pins will also work for the 1.8" TFT shield
#define TFT_CS     4
#define TFT_RST    0  // you can also connect this to the Arduino reset
                      // in which case, set this #define pin to 0!
#define TFT_DC     5

// Option 1 (recommended): must use the hardware SPI pins
// (for UNO thats sclk = 13 and sid = 11) and pin 10 must be
// an output. This is much faster - also required if you want
// to use the microSD card (see the image drawing example)
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);

// Option 2: use any pins but a little slower!
#define TFT_SCLK 13   // set these to be whatever pins you like!
#define TFT_MOSI 14   // set these to be whatever pins you like!
//Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

#define usb_width 8
#define usb_height 8
static const unsigned char PROGMEM usb_bits[] = {
     0x70, 0x88, 0xC4, 0xE2, 0x7E, 0x32, 0x09, 0x07 };


#define WiFi_Logo_width 60
#define WiFi_Logo_height 36
static const unsigned char PROGMEM WiFi_Logo_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
  0xFF, 0x03, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0xFF, 0xFF, 0xFF, 0x07, 0xC0, 0x83, 0x01, 0x80, 0xFF, 0xFF, 0xFF, 
  0x01, 0x00, 0x07, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00, 
  0xC0, 0xFF, 0xFF, 0x7C, 0x00, 0x60, 0x0C, 0x00, 0xC0, 0x31, 0x46, 0x7C, 
  0xFC, 0x77, 0x08, 0x00, 0xE0, 0x23, 0xC6, 0x3C, 0xFC, 0x67, 0x18, 0x00, 
  0xE0, 0x23, 0xE4, 0x3F, 0x1C, 0x00, 0x18, 0x00, 0xE0, 0x23, 0x60, 0x3C, 
  0x1C, 0x70, 0x18, 0x00, 0xE0, 0x03, 0x60, 0x3C, 0x1C, 0x70, 0x18, 0x00, 
  0xE0, 0x07, 0x60, 0x3C, 0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C, 
  0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00, 
  0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00, 0xE0, 0x8F, 0x71, 0x3C, 
  0x1C, 0x70, 0x18, 0x00, 0xC0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x08, 0x00, 
  0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x0C, 0x00, 0x80, 0xFF, 0xFF, 0x1F, 
  0x00, 0x00, 0x06, 0x00, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x07, 0x00, 
  0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

#define Rain_width 12
#define Rain_height 12
static const unsigned char PROGMEM Rain_bits[] = {
     0x00, 0x00, 0x1C, 0x00, 0xBE, 0x01, 0xFF, 0x03, 0xFF, 0x07, 0xFE, 0x07,
     0x88, 0x03, 0x22, 0x00, 0xAA, 0x02, 0xAA, 0x02, 0x08, 0x02, 0x00, 0x00 };

#define tokyo_width 60
#define tokyo_height 60
static const unsigned char PROGMEM tokyo_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xBE, 0x47, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x60, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xE0, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x08, 0x02, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xFC, 0x07, 0x1C, 0x00, 0x00, 0x00, 0x80, 0x03, 0xFE, 
  0x0F, 0x38, 0x00, 0x00, 0x00, 0xC0, 0x10, 0x5E, 0x8D, 0x71, 0x00, 0x00, 
  0x00, 0x60, 0xF0, 0xFF, 0xFF, 0x61, 0x00, 0x00, 0x00, 0x60, 0xF0, 0xFF, 
  0xFF, 0xC1, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x80, 0x81, 0x01, 0x00, 
  0x00, 0x18, 0xE0, 0xFF, 0xFF, 0x00, 0x03, 0x00, 0x00, 0x08, 0xC0, 0xFF, 
  0x7F, 0x00, 0x03, 0x00, 0x00, 0x0C, 0x00, 0x1B, 0x09, 0x00, 0x06, 0x00, 
  0x00, 0x0C, 0x80, 0xFF, 0x1F, 0x00, 0x06, 0x00, 0x00, 0x06, 0x80, 0xFF, 
  0x3F, 0x00, 0x04, 0x00, 0x00, 0x06, 0x8C, 0x5E, 0x3D, 0x02, 0x0C, 0x00, 
  0x00, 0x06, 0xFC, 0xFF, 0xFF, 0x03, 0x0C, 0x00, 0x00, 0x02, 0xFC, 0xFF, 
  0xFF, 0x03, 0x0C, 0x00, 0x00, 0x02, 0x18, 0x00, 0x00, 0x03, 0x08, 0x00, 
  0x00, 0x03, 0xF8, 0xFF, 0xFF, 0x01, 0x08, 0x00, 0x00, 0x03, 0xE0, 0xFF, 
  0xFF, 0x00, 0x08, 0x00, 0x00, 0x03, 0xC0, 0x18, 0x31, 0x00, 0x18, 0x00, 
  0x00, 0x03, 0xE0, 0xFF, 0xFF, 0x00, 0x08, 0x00, 0x00, 0x03, 0xE0, 0xFF, 
  0xFF, 0x00, 0x08, 0x00, 0x00, 0x02, 0xA2, 0x5E, 0xBD, 0x0C, 0x08, 0x00, 
  0x00, 0x02, 0xFE, 0xFF, 0xFF, 0x0F, 0x0C, 0x00, 0x00, 0x06, 0xFE, 0xFF, 
  0xFF, 0x0F, 0x0C, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x0C, 0x0C, 0x00, 
  0x00, 0xC4, 0xFC, 0xFF, 0xFF, 0x37, 0x04, 0x00, 0x00, 0xEC, 0xF9, 0xFF, 
  0xFF, 0x7B, 0x06, 0x00, 0x00, 0x6C, 0x63, 0x18, 0x61, 0xD8, 0x02, 0x00, 
  0x00, 0xF8, 0xF9, 0xFF, 0xFF, 0x7B, 0x03, 0x00, 0x00, 0xD8, 0xFD, 0xFF, 
  0xFF, 0x73, 0x01, 0x00, 0x00, 0xB0, 0xAC, 0x5E, 0xBD, 0xA2, 0x01, 0x00, 
  0x00, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0xFF, 
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x30, 0x00, 0x00, 
  0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
  0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x06, 0xBC, 0x07, 0x00, 0x00, 
  0x00, 0x00, 0xF8, 0xFE, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 
  0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };

void setup(void)
{
   Serial.begin(115200);
   Serial.println("Hello! ST7735 TFT Test on ESP12E");

   // Use this initializer if you're using a 1.8" TFT
   tft.initR(INITR_BLACKTAB);   // initialize a ST7735S chip, black tab

   // Use this initializer (uncomment) if you're using a 1.44" TFT
   //tft.initR(INITR_144GREENTAB);   // initialize a ST7735S chip, black tab

   Serial.println("Initialized");

   uint16_t time = millis();
   tft.fillScreen(ST7735_WHITE);
   time = millis() - time;

   Serial.println(time, DEC);
   delay(500);

   tft.drawXBitmap(10, 10, WiFi_Logo_bits, WiFi_Logo_width,
                   WiFi_Logo_height, ST7735_GREEN);
                   

   delay(1000);
   //Include xbm file and make sure you add PROGMEM
   tft.drawXBitmap(100, 100, usb_bits, usb_width,
                   usb_height, ST7735_GREEN);
   delay(500);
   tft.drawXBitmap(50, 120, usb_bits, usb_width,
                   usb_height, ST7735_BLACK);
   Serial.println("Drawn 2 usb images black and green");
   delay(500);
   tft.drawXBitmap(23, 45, Rain_bits, Rain_width,
                   Rain_height, ST7735_BLUE);
   delay(500);
   tft.drawXBitmap(70, 30, tokyo_bits, tokyo_width, tokyo_height, ST7735_CYAN);
   delay(500);
}

void loop()
{
}
